{"cells":[{"cell_type":"markdown","id":"fe135a41-7781-46d9-9bb3-9a189b633d97","metadata":{"id":"fe135a41-7781-46d9-9bb3-9a189b633d97"},"source":["# Dataset Titanic"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yLMmjVESQreN","executionInfo":{"status":"ok","timestamp":1705420633350,"user_tz":0,"elapsed":2871,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"0c659238-0063-446f-8a92-c4ec91e4de1b"},"id":"yLMmjVESQreN","execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px\n","import math\n","from scipy.stats import ttest_ind"],"metadata":{"id":"GpduKupfQ6qK","executionInfo":{"status":"ok","timestamp":1705420633354,"user_tz":0,"elapsed":60,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"GpduKupfQ6qK","execution_count":5,"outputs":[]},{"cell_type":"code","source":["titanic_data = pd.read_csv(\"/content/drive/MyDrive/8.Machine Learning/Dataset Titanic/train.csv\")\n","titanic_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"TSLlMW8qRCcU","executionInfo":{"status":"ok","timestamp":1705420633355,"user_tz":0,"elapsed":59,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"83818789-9883-4b7e-df66-aaf02aaba192"},"id":"TSLlMW8qRCcU","execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  "],"text/html":["\n","  <div id=\"df-620c2145-fa8e-444c-953f-c1ded2160f24\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-620c2145-fa8e-444c-953f-c1ded2160f24')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-620c2145-fa8e-444c-953f-c1ded2160f24 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-620c2145-fa8e-444c-953f-c1ded2160f24');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d41f598f-d2b0-4831-9a79-083c7ca3efbc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d41f598f-d2b0-4831-9a79-083c7ca3efbc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d41f598f-d2b0-4831-9a79-083c7ca3efbc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["## A. Exploratory Analysis"],"metadata":{"id":"SoEWQ9tqBuvw"},"id":"SoEWQ9tqBuvw"},{"cell_type":"markdown","source":["### A1. Overview"],"metadata":{"id":"wUNI145DEaOe"},"id":"wUNI145DEaOe"},{"cell_type":"code","execution_count":7,"id":"d3c62bcc-2195-4253-a209-f5aefb7eccca","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d3c62bcc-2195-4253-a209-f5aefb7eccca","executionInfo":{"status":"ok","timestamp":1705420633355,"user_tz":0,"elapsed":56,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"9b4d5f4e-fd8e-485e-8d78-26be447e29b6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Titanic dataset Shape = (891, 12)\n"]}],"source":["print('Titanic dataset Shape = {}'.format(titanic_data.shape))"]},{"cell_type":"code","source":["features = titanic_data.drop(['Survived'], axis=1).columns.tolist()\n","target = ['Survived']\n","\n","print('Titanic dataset Features = {}'.format(features))\n","print('Titanic dataset Target Variable = {}'.format(target))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RDy6tgeAS78u","executionInfo":{"status":"ok","timestamp":1705420633356,"user_tz":0,"elapsed":49,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"6a3ecc52-8829-46cb-e504-23ee6ac06efb"},"id":"RDy6tgeAS78u","execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Titanic dataset Features = ['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\n","Titanic dataset Target Variable = ['Survived']\n"]}]},{"cell_type":"markdown","source":["**Target Variable:**\n","* Survived\n","  * 1 = Survived\n","  * 0 = Not Survived\n","  \n","\n","**Features:**\n","* PassengerId\n","\n","* Pclass (Passenger Class) - socio-economic status of the passenger: Upper Class (1), Middle Class (2) and Lower Class (3)\n","\n","* Name\n","* Sex\n","* Age\n","* SibSp _ total number of the passengers' siblings and spouse\n","* Parch - total number of the passengers' parents and children\n","* Ticket - ticket number of the passenger\n","* Fare - passenger fare\n","* Cabin - cabin number of the passenger\n","* Embarked - port of embarkation: Cherbourg (C), Queenstown (Q) and Southampton (S)\n"],"metadata":{"id":"Ed0G7_WZPPKk"},"id":"Ed0G7_WZPPKk"},{"cell_type":"code","execution_count":9,"id":"8d5d7f04-7c14-4d98-b719-2e5600b35ca4","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8d5d7f04-7c14-4d98-b719-2e5600b35ca4","executionInfo":{"status":"ok","timestamp":1705420633356,"user_tz":0,"elapsed":46,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"9195232a-3d69-48b8-be18-31f68b206a17"},"outputs":[{"output_type":"stream","name":"stdout","text":["Titanic dataset null values by feature: \n"," Cabin          687\n","Age            177\n","Embarked         2\n","PassengerId      0\n","Pclass           0\n","Name             0\n","Sex              0\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","dtype: int64\n"]}],"source":["null_values = titanic_data.drop(['Survived'], axis=1).isna().sum().sort_values(ascending=False)\n","\n","print('Titanic dataset null values by feature: \\n {}'.format(null_values))"]},{"cell_type":"code","source":["sns.set_style('whitegrid')\n","plt.figure(figsize=(6, 6))\n","cores = ['#FF6F61', '#90EE90']\n","survived_data = titanic_data['Survived'].value_counts()\n","percentage = (survived_data / survived_data.sum()) * 100\n","plt.bar(['Not Survived', 'Survived'],survived_data, color= cores)\n","\n","for i, percentage in enumerate(percentage):\n","    plt.text(i, survived_data[i] + 5, f'{percentage:.2f}%', ha='center', va='bottom')\n","\n","plt.title('Distribuition of Survived Passengers')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"JcW_-dP4Ktkm","executionInfo":{"status":"ok","timestamp":1705420633356,"user_tz":0,"elapsed":44,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"9b602e81-b632-496e-fbb5-95ab15ba97fc"},"id":"JcW_-dP4Ktkm","execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAgkAAAIQCAYAAAALu/2rAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABFfUlEQVR4nO3deVxUZeP//7eMoCi4oKS5r4wLIKBpIEmR5hbmUpqplZlLppjllnef3Ai10ow2zczc0uxGTRQzu1NLJc2SXDP3PQXMfQGG+f3Rl/k1eqmMoKS9nvfDx91c5zrXua4zc5j3XOecmQJ2u90uAACAK7jldwcAAMA/EyEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQE35b333pPVar0t2+rWrZu6devmeLx+/XpZrVZ9/fXXebaNw4cPy2q1asGCBTmqb7Va9d577+XZ9m+FzZs368knn1RQUJCsVqt27NiR311yye18jV0pMjJSw4YNy5dtA/8kBfO7A8h/CxYs0Kuvvup47OHhoeLFi8tqtSoiIkLt27eXl5dXrrdz/PhxzZ8/X02bNlXt2rVz3d6ttnr1am3evFn9+/fP7664LCMjQy+99JI8PDz06quvqnDhwipXrtw16x8+fFgffPCBfvrpJx0/flzFihVTlSpV1KhRI0VHR9/Gnt9Z/h5iChQooNKlS8vPz0+9e/dWo0aN8rFnQN4gJMAhOjpaFSpUUGZmplJTU7VhwwbFxsbqs88+04cffqhatWo56r7wwgvq1auXS+2fOHFC77//vsqXL+9SSJg2bZpL27kZ5cuX1+bNm1Ww4P9/SKxevVpz5swxhoTNmzfLYrHc8n7drIMHD+rIkSOKiYnRE088cd26Bw4c0OOPP65ChQqpQ4cOqlChgk6cOKHt27dr6tSp+RYSbuY1lh8aN26sxx57THa7XYcPH9bcuXP1zDPPaMqUKYqIiMjv7gG5QkiAQ5MmTRQQEOB43Lt3byUlJalPnz7q27evEhMTVbhwYUlSwYIFnd5Qb4WLFy/K09NTHh4et3Q70l+fAgsVKpTj+q7UzQ8nT56UJHl7e9+w7meffaYLFy5o0aJFKl++vNOytLS0POvThQsXVKRIkRzXvx2vsbxQpUoVPfbYY47HzZo1U5s2bTRz5kxCggtcfX3g9uCaBFxXaGio+vbtqyNHjmjx4sWOctP54rVr16pz585q0KCBgoOD1bx5c02cOFHSX9cRPP7445KkV199VVar1ekagG7duunRRx/V1q1b1aVLF9WrV8+x7pXXJGTLysrSxIkT1bhxYwUFBalPnz46duyYU51rnVu+ss0rr0kYNmyY5syZI0mOvv59vKZrErZv367nn39eISEhCg4O1jPPPKPk5GSnOgsWLJDVatXPP/+ssWPH6v7771dQUJBefPFFxxv7jSQlJempp55SUFCQGjRooBdeeEF79uxxLB82bJi6du0qSRowYICsVqtx/2U7ePCgypQpc1VAkKRSpUo5Pb7WtRhX7ufscW7YsEEjR45UaGioIiIi9PXXXzvKrzRv3jxZrVb9/vvvkq5+jT366KPXfB088MADTjMeWVlZ+uyzz9S6dWsFBAQoLCxMr7/+uk6fPu20rt1u14cffqgmTZqoXr166tatm3bt2nWtXZUjVqtVJUuW1OHDhyVJGzduVHR0tB588EH5+/srIiJCsbGxunTpktN6KSkpevXVV9WkSRP5+/srPDxcL7zwgqMdSdqyZYt69OihRo0aKTAwUJGRkU6nCl0Ze2RkpHr37q2NGzfq8ccfV0BAgB5++GEtWrToqjH99ttv6tq1qwIDA9WkSRN9+OGHio+Pl9Vqdeqf9NcMXPbrMzg4WL169bpqnw4bNkzBwcE6ePCgevbsqeDgYA0aNEiStH//fvXv31+NGzdWQECAmjRpooEDB+rs2bOuPRHIE//8mI5899hjj2nixIlas2aNOnbsaKyza9cu9e7dW1arVdHR0fLw8NCBAwf0yy+/SJKqV6+u6OhoxcXFqVOnTqpfv74kKSQkxNHGqVOn1LNnT7Vu3Vpt2rS56g3qSh999JEKFCignj17Ki0tTTNmzNCzzz6rr776yjHjcbM6deqkEydOaO3atXrzzTdvWH/Xrl3q0qWLihYtqueff14FCxbUF198oW7dumn27NmqV6+eU/2YmBgVK1ZM/fr105EjRzRjxgyNHj1akyZNuu521q1bp549e6pChQrq16+fLl26pNmzZ6tz585asGCBKlSooE6dOqlMmTKaPHmyunXrpoCAAJUuXfqabZYvX15JSUlKSkpSaGhojvZPTo0aNUo+Pj568cUXdeHCBT344IMqUqSIli1bpoYNGzrVTUxMVM2aNeXn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y9u3WCy8WIFc4PiBq/i7++/iUkgYP368HnroIZUrV04nTpzQe++9Jzc3Nz366KPy9vZWhw4dNG7cOBUvXlxeXl6KiYlRcHCwIySEh4erRo0aGjJkiAYPHqyUlBRNmjRJXbp0kYeHx60YHwAAuEkuhYQ//vhDL7/8sk6dOiUfHx/Vr19f8+fPd9wGOXz4cLm5uSk6Olrp6ekKDw/XiBEjHOtbLBZNnjxZI0eOVKdOneTp6al27dopOjo6b0cFAAByzaWQ8M4771x3eaFChTRixAinYHCl8uXLa+rUqa5sFgAA5AN+uwEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGOUqJHz88ceyWq164403HGWXL1/WqFGj1KhRIwUHB6t///5KTU11Wu/o0aPq1auX6tWrp9DQUI0fP16ZmZm56QoAAMhjNx0SNm/erHnz5slqtTqVx8bGauXKlZo0aZJmzZqlEydOqF+/fo7lNptNvXv3VkZGhubNm6dx48Zp4cKFiouLu/lRAACAPHdTIeH8+fMaPHiwYmJiVLx4cUf52bNnFR8fr2HDhik0NFT+/v6KjY3Vpk2blJycLElas2aNdu/erbfeeku1a9dWRESEBgwYoDlz5ig9PT1PBgUAAHLvpkLC6NGjFRERobCwMKfyrVu3KiMjw6m8evXqKleunCMkJCcny8/PT6VLl3bUCQ8P17lz57R79+6b6Q4AALgFCrq6wtKlS7V9+3b997//vWpZamqq3N3dVaxYMafyUqVKKSUlxVHn7wFBkuNxdp2cstlsLtW/EYvFkqftAf90eX0M4e6V/VrhNXPnc+U5dCkkHDt2TG+88YY+/fRTFSpUyOWO5bUtW7bkWVuenp6qU6dOnrUH3Al27typixcv5nc3cAfJy7+7+OdzKSRs27ZNaWlpat++vaPMZrPpp59+0pw5czRt2jRlZGTozJkzTrMJaWlp8vX1lfTXrMHmzZud2s2++yG7Tk4FBATw6R/IhSsvPAauxWazacuWLfzdvQtkP5c54VJIuP/++5WQkOBU9uqrr6patWrq2bOn7r33Xrm7uyspKUnNmzeXJO3du1dHjx5VUFCQJCkoKEiTJ09WWlqaSpUqJUlat26dvLy8VKNGDVe6I4vFwosVyAWOH7iKv7v/Li6FBC8vL/n5+TmVFSlSRCVKlHCUd+jQQePGjVPx4sXl5eWlmJgYBQcHO0JCeHi4atSooSFDhmjw4MFKSUnRpEmT1KVLF3l4eOTNqAAAQK65fOHijQwfPlxubm6Kjo5Wenq6wsPDNWLECMdyi8WiyZMna+TIkerUqZM8PT3Vrl07RUdH53VXAABALuQ6JMyaNcvpcaFChTRixAinYHCl8uXLa+rUqbndNAAAuIX47QYAAGBESAAAAEaEBAAAYERIAAAARoQEAABgREgAAABGhAQAAGBESAAAAEaEBAAAYERIAAAARoQEAABgREgAAABGhAQAAGBESAAAAEaEBAAAYERIAAAARoQEAABgREgAAABGhAQAAGBESAAAAEaEBAAAYERIAAAARoQEAABgREgAgLvA559/rqioKIWEhCgkJESdOnXS6tWrHctTUlI0ePBgNW7cWEFBQWrXrp2WL1+e4zbvu+8+vf766/r++++d6tyo3fT0dA0ePFghISFq3ry51q1b57T+J598ojFjxuTBHsCtQEgAgLtA2bJlNWjQIC1YsEDx8fG6//779eKLL2rXrl2SpKFDh2rfvn366KOPlJCQoGbNmumll17S9u3bc9Tml19+qbp166pfv36ONnPS7hdffKFt27bpiy++UMeOHfXKK6/IbrdLkg4dOqQvv/xSAwcOvIV7BrlBSACAu0BkZKQiIiJUpUoVVa1aVQMHDlSRIkWUnJwsSdq0aZO6du2qwMBAVaxYUX379lWxYsW0bdu2HLVZpUoVderUyanNnLS7Z88eRUZGqmbNmurSpYtOnjypP//8U5I0cuRIDRo0SF5eXrdsvyB3CAkAcJex2WxaunSpLly4oODgYElScHCwli1bplOnTikrK0tLly7V5cuX1bBhwxy3uW7dOl28eNHRZk7arVWrln7++WddunRJa9aska+vr0qWLKnFixerUKFCatasWd7vAOSZgvndAQBA3ti5c6eefPJJXb58WUWKFNEHH3ygGjVqSJImTZqkgQMHqlGjRipYsKAKFy6s999/X5UrV85xm4UKFVJcXJyjzZy026FDB+3cuVOtWrVSyZIlNWnSJJ0+fVpxcXGaNWuW3nnnHSUmJqpSpUqKjY1VmTJlbt0OgsuYSQCAu0TVqlW1aNEizZ8/X507d9bQoUO1e/duSdK7776rM2fO6LPPPlN8fLy6d++ul156STt37sxRm/PmzVPTpk01fPhwR5s5adfd3V0jRozQd999p/j4eDVo0EDjx49Xt27dtH37dv3vf//TV199pXr16ikmJubW7RzcFEICANwlPDw8VLlyZfn7++uVV15RrVq1NHPmTB08eFCzZ89WbGysQkNDVatWLfXr10/+/v6aM2dOjtqsW7eunnzySVmtVs2cOVOSbqrdH3/8Ubt27VLXrl21YcMGNWnSREWKFFHLli21YcOGPN8nyB1ONwDAXSorK0vp6em6ePGiJMnNzflzocVicdxpkFN2u13p6emS5HK7ly9f1ujRo/X222/LYrHIZrM56mVmZspms7nUF9x6zCQAwF1gwoQJ+umnn3T48GHt3LlTEyZM0IYNGxQVFaVq1aqpcuXKev3117V582YdPHhQn376qdauXaumTZs62njmmWc0e/ZsY5u///675s2b52hTUo7bzfbhhx8qIiJCderUkSSFhIRoxYoV+u233zR79myFhITc4r0EVzGTAAB3gbS0NA0dOlQnTpyQt7e3rFarpk2bpsaNG0uSPv74Y02YMEF9+vTRhQsXVKlSJY0bN04RERGONg4dOuS4PdHU5r333qupU6c62nR3d89Ru5L0+++/a9myZVq0aJGjrEWLFtqwYYO6dOmiqlWrasKECbdwD+FmFLC7Otf0D2Cz2ZScnKygoCBZLJa8bfztkdLhg3nbJvBPU6GSNGhkfvcCd5Bb+ncXt5UrzyWnGwAAgBEhAQAAGBESAACAESEB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eLhGjhyp3bt3q06dOjnevs1my033r2KxWPK0PeCfLq+PoduFYxX/Nnl5rLrS1k2HhKysLMXGxiokJER+fn6SpNTUVLm7u6tYsWJOdUuVKqWUlBRHnb8HBEmOx9l1cmrLli032/2reHp6uhRQgLvBzp07dfHixfzuhks4VvFvlF/H6k2HhFGjRmnXrl36/PPP87I/LgkICOATBZALVqs1v7sAIAfy8li12Ww5/pB9UyFh9OjRWrVqlWbPnq2yZcs6ykuXLq2MjAydOXPGaTYhLS1Nvr6+jjqbN292ai/77ofsOjllsVgICUAucPwAd4b8OlZdunDRbrdr9OjRWrFihWbMmKGKFSs6Lff395e7u7uSkpIcZXv37tXRo0cVFBQkSQoKCtLvv/+utLQ0R51169bJy8tLNWrUyMVQAABAXnJpJmHUqFFasmSJPvzwQxUtWtRxDYG3t7cKFy4sb29vdejQQePGjVPx4sXl5eWlmJgYBQcHO0JCeHi4atSooSFDhmjw4MFKSUnRpEmT1KVLF3l4eOT5AAEAwM1xKSTMnTtXktStWzen8rFjx6p9+/aSpOHDh8vNzU3R0dFKT09XeHi4RowY4ahrsVg0efJkjRw5Up06dZKnp6fatWun6Ojo3I4FAADkIZdCws6dO29Yp1ChQhoxYoRTMLhS+fLlNXXqVFc2DQAAbjN+uwEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGLkcEn766Sf16dNH4eHhslqt+vbbb52W2+12vfvuuwoPD1dgYKCeffZZ7d+/36nOqVOn9MorrygkJEQNGjTQ8OHDdf78+VwNBAAA5C2XQ8KFCxdktVo1YsQI4/KpU6dq1qxZGjlypObPny9PT0/16NFDly9fdtQZNGiQdu/erenTp2vy5MnauHGjXn/99ZsfBQAAyHMuh4SIiAgNHDhQzZo1u2qZ3W7XzJkz9cILL6hp06aqVauW3nzzTZ04ccIx47Bnzx798MMPiomJUb169dSgQQO99tprWrp0qY4fP577EQEAgDxRMC8bO3z4sFJSUhQWFuYo8/b2Vr169bRp0ya1bt1amzZtUrFixRQQEOCoExYWJjc3N23evNkYPq7FZrPlZfdlsVjytD3gny6vj6HbhWMV/zZ5eay60laehoSUlBRJUqlSpZzKS5UqpdTUVElSamqqfHx8nDtRsKCKFy/uWD+ntmzZkoveOvP09FSdOnXyrD3gTrBz505dvHgxv7vhEo5V/Bvl17GapyHhdgsICOATBZALVqs1v7sAIAfy8li12Ww5/pCdpyHB19dXkpSWlqZ77rnHUZ6WlqZatWpJkkqXLq2TJ086rZeZmanTp0871s8pi8VCSABygeMHuDPk17Gap9+TUKFCBfn6+iopKclRdu7cOf36668KDg6WJAUHB+vMmTPaunWro86PP/6orKwsBQYG5mV3AABALrg8k3D+/HkdPHjQ8fjw4cPasWOHihcvrnLlyunpp5/WRx99pMqVK6tChQp69913dc8996hp06aSpOrVq+uBBx7Q//3f/2nUqFHKyMjQmDFj1Lp1a5UpUybvRgYAAHLF5ZCwdetWPf30047HY8eOlSS1a9dO48aNU8+ePXXx4kW9/vrrOnPmjOrXr69PPvlEhQoVcqzz9ttva8yYMXrmmWfk5uamRx55RK+99loeDAcAAOQVl0NCo0aNtHPnzmsuL1CggAYMGKABAwZcs06JEiU0YcIEVzcNAABuI367AQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAYERIAAIARIQEAABgREgAAgBEhAQAAGBESAACAESEBAAAY5VtImDNnjiIjIxUQEKAnnnhCmzdvzq+uAAAAg3wJCYmJiRo7dqxefPFFLVy4ULVq1VKPHj2UlpaWH90BAAAG+RISpk+fro4dO6pDhw6qUaOGRo0apcKFCys+Pj4/ugMAAAwK3u4Npqena9u2berdu7ejzM3NTWFhYdq0aVOO2rDb7Y62LBZLnvXNYrFI91aQLLd9twC31z1lJZtNNpstv3tyUywWi0qplNy4rAp3uZIqKVseH6vZbWW/l17PbX83/PPPP2Wz2VSqVCmn8lKlSmnv3r05aiMrK0uStH379jzvn2oFS7XyvlngHyc5Ob97kCul/9//gLtdspJvSbvZ76XXc0d+ZC5YsKACAgLk5uamAgUK5Hd3AAC4Y9jtdmVlZalgwRtHgNseEkqWLCmLxXLVRYppaWkqXTpnnwrc3Nzk4eFxK7oHAAD+n9t+Qs/Dw0N169ZVUlKSoywrK0tJSUkKDg6+3d0BAADXkC+nG7p3766hQ4fK399fgYGBmjFjhi5evKj27dvnR3cAAIBBvoSEVq1a6eTJk4qLi1NKSopq166tTz75JMenGwAAwK1XwJ6TeyAAAMC/DjcZAwAAI0ICAAAwIiQAAAAjQgLueO+9954ee+yxW76dyMhIffbZZ7d8O8A/2fr162W1WnXmzJlbup1hw4apb9++t3QbuDFCwl1o2LBhslqt+vjjj53Kv/32W1mtVpfayukb42+//aY+ffooNDRUAQEBioyM1EsvvXRbftnzueee480b/zonT57UiBEj9OCDD8rf31+NGzdWjx499PPPP9/S7QYHB2vNmjXy9va+pdvBP8Md+bXMuLFChQpp6tSp6tSpk4oXL35Lt3Xy5Ek988wzeuihhzRt2jR5e3vryJEj+u6773ThwoWrfqcjp9LT03P0zZpFixZV0aJFb2obwJ2qf//+ysjI0Lhx41SxYkWlpaUpKSlJp06duqn27Ha7bDbbDb+q18PDQ76+vje1Ddx5mEm4S4WFhal06dKaMmXKdestX75crVu3lr+/vyIjI/Xpp586lnXr1k1HjhzR2LFjZbVarzkL8csvv+jcuXOKiYlRnTp1VLFiRd1///0aPny4KlasKElasGCBGjRo4LTelTMb2acNvvzyS0VGRiowMFBffPGFwsPDr/ohkhdeeEGvvvqq03qStGbNGgUEBFw1FRoTE6Onn37a8Xjjxo166qmnFBgYqIiICMXExOjChQuO5WlpaerTp48CAwMVGRmpxYsXX3c/ArfTmTNntHHjRg0aNEj333+/ypcvr8DAQPXu3VsPP/ywDh8+LKvVqh07djitY7VatX79ekn//2mD1atXq3379goICFB8fLysVqv27NnjtL3PPvtMTZs2dVrvzJkzOnfunAIDA7V69Wqn+itWrFBwcLAuXrwoSTp27JgGDBigBg0aqGHDhnrhhRd0+PBhR32bzaaxY8eqQYMGatSokd58880c/UIhbj1Cwl3Kzc1NL7/8smbPnq0//vjDWGfr1q166aWX1KpVKyUkJKhfv3569913tWDBAkl/vfmWLVtW0dHRWrNmjdasWWNsp3Tp0srMzNSKFStyfWAfPHhQy5cv1/vvv69FixapRYsWOnXqlOMPmySdOnVKP/zwg9q0aXPV+qGhoSpWrJiWL1/uKLPZbFq2bJmioqIc2+jZs6ceeeQRLV68WO+8845+/vlnjRkzxrHOsGHDdOzYMc2cOVNxcXH6/PPPb8upEyAnihQpoiJFiujbb79Venp6rtqaMGGCXnnlFSUmJqp58+by9/dXQkKCU53Fixfr0UcfvWpdLy8vPfjgg1qyZIlTeUJCgpo2bSpPT09lZGSoR48eKlq0qObMmaO5c+eqSJEiev755x19//TTT7Vw4ULFxsbq888/1+nTp7VixYpcjQt5g5BwF2vWrJlq166tuLg44/Lp06crNDRUL774oqpWrar27durS5cumjZtmiSpRIkSslgsKlq0qHx9fa85xRgUFKQ+ffo4PtU8//zz+uSTT5SamupynzMyMvTmm2+qTp06qlWrlooXL64mTZo4/dFavny5SpYsqUaNGl21vsViUatWrZz+aCUlJenMmTNq3ry5JGnKlCmKiorSs88+qypVqigkJET/+c9/tGjRIl2+fFn79u3T999/rzFjxigoKEj+/v564403dOnSJZfHA9wKBQsW1Lhx47Ro0SI1aNBATz75pCZOnKjffvvN5baio6PVuHFjVapUSSVKlFBUVJSWLl3qWL5v3z5t27bNEbKv1KZNG3377beOWYNz585p1apVjvqJiYnKysrSG2+8IavVqurVq2vs2LE6duyYNmzYIEmaMWOGevXqpUceeUTVq1fXqFGjuObhH4KQcJcbNGiQFi1adNX0oSTt3btXISEhTmUhISE6cOCAbDabS9sZOHCg1qxZo5EjR6pmzZqaN2+eWrZsqZ07d7rUTrly5eTj4+NUFhUVpW+++cbxqSMhIUGtW7eWm5v55RsVFaUNGzbo+PHjjvoPPvigihUrJumviywXLFig4OBgx7/nn39eWVlZOnz4sPbs2aOCBQvK39/f0Wb16tUd6wP/BM2bN9cPP/ygjz76SA888IA2bNig9u3bO2YCcyogIMDpcevWrXXkyBElJydL+uv4qVu3rqpXr25cv0mTJnJ3d9d3330n6a8Q7+XlpbCwMEl/HW8HDx5USEiI43hr1KiRLl++rIMHD+rs2bNKSUlRvXr1HG1eefwh/xAS7nL33XefwsPDNWHChFu+rZIlS6ply5YaOnSoEhMTdc899ziucXBzc7vqVERGRsZVbXh6el5VFhkZKbvdrlWrVunYsWPauHHjNT/VSFJgYKAqVaqkxMREXbp0SStWrHCqf+HCBT355JNatGiR499XX32lb775xnENBXAnKFSokBo3bqwXX3xR8+bNU7t27fTee+85AvTfj7nMzExjG1cec76+vrr//vsds3FLliy57vHm4eGh5s2bO2b7lixZolatWjkugLxw4YLq1q3rdLwtWrRIy5cvv267+GcgJPwLvPLKK1q5cqU2bdrkVF6tWjX98ssvTmW//PKLqlSpIovFIklyd3e/6qLBnPDw8FDFihUdU5AlS5bU+fPnnS4OzOnUaKFChfTII48oISFBS5YsUdWqVVW3bt3rrhMVFaWEhAR99913cnNz04MPPuhYVqdOHe3evVuVK1e+6p+Hh4eqVaumzMxMbd261bHO3r17b/l94UBu1ahRQxcuXHDMxqWkpDiW/f0ixhuJiopSYmKiNm3apEOHDqlVq1Y3rL9mzRrt2rVLP/74o9Obf926dXXgwAGVKlXqquPN29tb3t7e8vX11a+//upYJzMzU9u2bctxf3HrEBL+BaxWq6KiojRr1iyn8ueee05JSUn64IMPtG/fPi1cuFBz5szRc88956hTvnx5/fTTTzp+/LhOnjxpbH/lypUaNGiQVq5cqX379mnv3r2aNm2avv/+e0VGRkqS6tWrJ09PT02cOFEHDx5UQkKCS9OiUVFRWrVqleLj43P06SMqKkrbtm3T5MmT1bx5c6dbKXv27KlNmzZp9OjR2rFjh/bv369vv/1Wo0ePlvRXeHrggQc0YsQI/frrr9q6datee+01FS5cOMf9BW6lP//8U08//bS++uor/fbbbzp06JCWLVumTz75RA8//LAKFy6soKAgffzxx9qzZ482bNigSZMm5bj9Zs2a6fz58xo5cqQaNWqkMmXKXLf+fffdp9KlS2vQoEGqUKGC06mDqKgolSxZUi+88II2btyoQ4cOaf369YqJiXFcVP30009r6tSp+vbbb7Vnzx6NGjWKUP4PQUj4l4iOjr5qRqBu3bqaNGmSEhMTFRUVpbi4OEVHR6t9+/ZO6x05ckRNmzZVaGiose0aNWrI09NT48aNU9u2bdWpUyctW7ZMMTExatu2raS/LoJ866239P333zsujOrfv3+O+3///ferePHi2rdvX45CQuXKlRUYGKidO3deVb9WrVqaNWuW9u/fr6eeekrt2rVTXFyc7rnnHkedsWPH6p577lHXrl3Vv39/dezY8aa/7wHIa0WLFlW9evU0Y8YMde3aVVFRUXr33Xf1xBNP6PXXX5ckxcbGymazqX379oqNjdVLL72U4/a9vLz00EMP6bfffsvR8VagQAG1bt3aWN/T01OzZ89WuXLl1K9fP7Vq1Ur/+c9/dPnyZXl5eUn66wNLmzZtNHToUD355JMqWrSomjVrlvMdgluGn4oGAABGzCQAAAAjQgIAADAiJAAAACNCAgAAMCIkAAAAI0ICAAAwIiQAAAAjQgIAADAiJAAAACNCAgAAMCIkAAAAI0ICAAAw+v8A57y8KM8eULIAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"bMx54SbmVSRD"},"id":"bMx54SbmVSRD"},{"cell_type":"markdown","source":["### A2. Set \"PassengerId\" as index\n","\n","* Unique values\n","* Don´t have effect on the target variable"],"metadata":{"id":"AkFdK-RRVVOf"},"id":"AkFdK-RRVVOf"},{"cell_type":"code","source":["titanic_data = titanic_data.set_index('PassengerId')\n","titanic_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"VcOJFTuFVf4m","executionInfo":{"status":"ok","timestamp":1705420633357,"user_tz":0,"elapsed":43,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"cb718e07-d26c-4261-c240-24b5f8dcf99a"},"id":"VcOJFTuFVf4m","execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Survived  Pclass  \\\n","PassengerId                     \n","1                   0       3   \n","2                   1       1   \n","3                   1       3   \n","4                   1       1   \n","5                   0       3   \n","\n","                                                          Name     Sex   Age  \\\n","PassengerId                                                                    \n","1                                      Braund, Mr. Owen Harris    male  22.0   \n","2            Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0   \n","3                                       Heikkinen, Miss. Laina  female  26.0   \n","4                 Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0   \n","5                                     Allen, Mr. William Henry    male  35.0   \n","\n","             SibSp  Parch            Ticket     Fare Cabin Embarked  \n","PassengerId                                                          \n","1                1      0         A/5 21171   7.2500   NaN        S  \n","2                1      0          PC 17599  71.2833   C85        C  \n","3                0      0  STON/O2. 3101282   7.9250   NaN        S  \n","4                1      0            113803  53.1000  C123        S  \n","5                0      0            373450   8.0500   NaN        S  "],"text/html":["\n","  <div id=\"df-4a251bc4-25c4-4644-87a2-7f7a9ce292a6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a251bc4-25c4-4644-87a2-7f7a9ce292a6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4a251bc4-25c4-4644-87a2-7f7a9ce292a6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4a251bc4-25c4-4644-87a2-7f7a9ce292a6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5c367a12-05c3-4b99-b3e9-078a3d432101\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c367a12-05c3-4b99-b3e9-078a3d432101')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5c367a12-05c3-4b99-b3e9-078a3d432101 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"ySj5EAY5Zz0o"},"id":"ySj5EAY5Zz0o"},{"cell_type":"markdown","source":["### A3. Remove Columns with low statistical relevance\n","\n","* \"Name\", \"Ticket\" and \"Cabin\" columns"],"metadata":{"id":"IZYJ39vbSTi6"},"id":"IZYJ39vbSTi6"},{"cell_type":"code","execution_count":12,"id":"ebe0e758-169d-40d7-bbcd-96bb2740fecf","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"ebe0e758-169d-40d7-bbcd-96bb2740fecf","executionInfo":{"status":"ok","timestamp":1705420633358,"user_tz":0,"elapsed":42,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"adcb3bac-0bff-4738-ad77-0900202a59c6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","PassengerId                                                                \n","1                   0       3    male  22.0      1      0   7.2500        S\n","2                   1       1  female  38.0      1      0  71.2833        C\n","3                   1       3  female  26.0      0      0   7.9250        S\n","4                   1       1  female  35.0      1      0  53.1000        S\n","5                   0       3    male  35.0      0      0   8.0500        S"],"text/html":["\n","  <div id=\"df-fd653f80-ffa7-49da-96a1-25956829d1b6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd653f80-ffa7-49da-96a1-25956829d1b6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fd653f80-ffa7-49da-96a1-25956829d1b6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fd653f80-ffa7-49da-96a1-25956829d1b6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-09e76d3a-974a-467c-8278-1069de825316\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09e76d3a-974a-467c-8278-1069de825316')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-09e76d3a-974a-467c-8278-1069de825316 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":12}],"source":["titanic_data = titanic_data.drop([\"Name\",\"Ticket\",\"Cabin\"], axis=1)\n","titanic_data.head()"]},{"cell_type":"code","source":["features1 = titanic_data.drop(['Survived'], axis=1).columns.tolist()\n","\n","print('Titanic dataset Shape after removing \"Name\", \"Ticket\" and \"Cabin\" columns = {}'.format(titanic_data.shape))\n","print('\\nTitanic dataset Features = {}'.format(features1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zboGX3YJWxjA","executionInfo":{"status":"ok","timestamp":1705420633358,"user_tz":0,"elapsed":38,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"f0b43623-7903-46a5-8e0d-b0e3118dd555"},"id":"zboGX3YJWxjA","execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Titanic dataset Shape after removing \"Name\", \"Ticket\" and \"Cabin\" columns = (891, 8)\n","\n","Titanic dataset Features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n"]}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"T3xtetsCaH2V"},"id":"T3xtetsCaH2V"},{"cell_type":"markdown","source":["### A4. Tranform \"'Sex\" feature\n","\n","* 1 = female\n","* 2 = male"],"metadata":{"id":"QRJzq9onZ3bN"},"id":"QRJzq9onZ3bN"},{"cell_type":"code","source":["# Histograms by gender\n","male_data = titanic_data[titanic_data['Sex'] == 'male']['Age']\n","female_data = titanic_data[titanic_data['Sex'] == 'female']['Age']\n","\n","# Male\n","fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))\n","sns.histplot(male_data, kde=False, label='Male', color='blue', ax=axes[0])\n","axes[0].set_title('Histogram of Males by age')\n","axes[0].set_xlabel('Age')\n","axes[0].set_ylabel('Frequency')\n","\n","# Female\n","sns.histplot(female_data, kde=False, label='Female', color='purple', ax=axes[1])\n","axes[1].set_title('Histogram of Females by age')\n","axes[1].set_xlabel('Age')\n","axes[1].set_ylabel('Frequency')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":591},"id":"tgfS-65t6L_R","executionInfo":{"status":"ok","timestamp":1705420634294,"user_tz":0,"elapsed":971,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"93aa1617-5939-495f-ce80-7debd16786c1"},"id":"tgfS-65t6L_R","execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["titanic_data['Sex'] = titanic_data['Sex'].replace(['female','male'],[1,2])\n","titanic_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"aLToft9KabTc","executionInfo":{"status":"ok","timestamp":1705420634295,"user_tz":0,"elapsed":22,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"46a3781b-3d14-4302-aefa-4f87d6274934"},"id":"aLToft9KabTc","execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked\n","PassengerId                                                             \n","1                   0       3    2  22.0      1      0   7.2500        S\n","2                   1       1    1  38.0      1      0  71.2833        C\n","3                   1       3    1  26.0      0      0   7.9250        S\n","4                   1       1    1  35.0      1      0  53.1000        S\n","5                   0       3    2  35.0      0      0   8.0500        S"],"text/html":["\n","  <div id=\"df-56ae5356-2210-4695-8cb7-9790676389f7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-56ae5356-2210-4695-8cb7-9790676389f7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-56ae5356-2210-4695-8cb7-9790676389f7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-56ae5356-2210-4695-8cb7-9790676389f7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-26ac50da-6d83-453a-be18-3b36b0bc6be9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26ac50da-6d83-453a-be18-3b36b0bc6be9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-26ac50da-6d83-453a-be18-3b36b0bc6be9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"DSRJgq6Sa0qw"},"id":"DSRJgq6Sa0qw"},{"cell_type":"markdown","source":["### A5. Transform 'Embarked' feature\n","\n","* C = Cherbourg (1)\n","* Q = Queenstown (2)\n","* S = Southampton (3)"],"metadata":{"id":"Iivf3L4PeDLq"},"id":"Iivf3L4PeDLq"},{"cell_type":"code","execution_count":16,"id":"5fa22708-cc5f-4bff-a889-1b625f8bb83c","metadata":{"id":"5fa22708-cc5f-4bff-a889-1b625f8bb83c","executionInfo":{"status":"ok","timestamp":1705420634295,"user_tz":0,"elapsed":19,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"outputs":[],"source":["titanic_data['Embarked'].replace( 'C', 1, inplace=True)"]},{"cell_type":"code","source":["titanic_data['Embarked'].replace( 'Q', 2,  inplace=True)"],"metadata":{"id":"xaMLElfkh9sB","executionInfo":{"status":"ok","timestamp":1705420634295,"user_tz":0,"elapsed":19,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"xaMLElfkh9sB","execution_count":17,"outputs":[]},{"cell_type":"code","source":["titanic_data['Embarked'].replace( 'S',3,  inplace=True)"],"metadata":{"id":"CsW476UGihKW","executionInfo":{"status":"ok","timestamp":1705420634296,"user_tz":0,"elapsed":19,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"CsW476UGihKW","execution_count":18,"outputs":[]},{"cell_type":"code","source":["titanic_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"_xGCIJy0hmdn","executionInfo":{"status":"ok","timestamp":1705420634297,"user_tz":0,"elapsed":20,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"d6043b8a-9580-481c-c1e0-f3fa83a1bd8c"},"id":"_xGCIJy0hmdn","execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","PassengerId                                                              \n","1                   0       3    2  22.0      1      0   7.2500       3.0\n","2                   1       1    1  38.0      1      0  71.2833       1.0\n","3                   1       3    1  26.0      0      0   7.9250       3.0\n","4                   1       1    1  35.0      1      0  53.1000       3.0\n","5                   0       3    2  35.0      0      0   8.0500       3.0\n","...               ...     ...  ...   ...    ...    ...      ...       ...\n","887                 0       2    2  27.0      0      0  13.0000       3.0\n","888                 1       1    1  19.0      0      0  30.0000       3.0\n","889                 0       3    1   NaN      1      2  23.4500       3.0\n","890                 1       1    2  26.0      0      0  30.0000       1.0\n","891                 0       3    2  32.0      0      0   7.7500       2.0\n","\n","[891 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-b0cffba1-5688-4dee-8017-3c33ff2a6445\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>891</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0cffba1-5688-4dee-8017-3c33ff2a6445')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b0cffba1-5688-4dee-8017-3c33ff2a6445 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b0cffba1-5688-4dee-8017-3c33ff2a6445');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-906df0c7-e24c-483b-bf72-df50f0504781\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-906df0c7-e24c-483b-bf72-df50f0504781')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-906df0c7-e24c-483b-bf72-df50f0504781 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"tRnS2qOaeB0p"},"id":"tRnS2qOaeB0p"},{"cell_type":"markdown","source":["---"],"metadata":{"id":"cAW-sx_ox-_C"},"id":"cAW-sx_ox-_C"},{"cell_type":"markdown","source":["## B. Split Titanic Dataset\n","\n","Split into:\n","* train set (70%)\n","* test set (30%)"],"metadata":{"id":"XmQ6b2zllec2"},"id":"XmQ6b2zllec2"},{"cell_type":"code","source":["from sklearn import tree\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"XopgjN1mj1xz","executionInfo":{"status":"ok","timestamp":1705420634297,"user_tz":0,"elapsed":19,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"XopgjN1mj1xz","execution_count":20,"outputs":[]},{"cell_type":"code","source":["#Target variable\n","y = titanic_data['Survived']\n","\n","#Features\n","X = titanic_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)"],"metadata":{"id":"9qpkWMb3j1s7","executionInfo":{"status":"ok","timestamp":1705420634749,"user_tz":0,"elapsed":470,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"9qpkWMb3j1s7","execution_count":21,"outputs":[]},{"cell_type":"code","source":["print('Train Set shape is {}'.format(X_train.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kgZg8pywj1nn","executionInfo":{"status":"ok","timestamp":1705420634752,"user_tz":0,"elapsed":473,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"44d345ea-27f1-4835-c02d-e1a4704a8289"},"id":"kgZg8pywj1nn","execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Set shape is (623, 7)\n"]}]},{"cell_type":"code","source":["print('Test Set shape is {}'.format(X_test.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEuQD1ThnRVO","executionInfo":{"status":"ok","timestamp":1705420634752,"user_tz":0,"elapsed":58,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"fcf47e87-de64-44fc-a8ff-8250c5b61204"},"id":"BEuQD1ThnRVO","execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Set shape is (268, 7)\n"]}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"cG94rLzOoJGE"},"id":"cG94rLzOoJGE"},{"cell_type":"markdown","source":["## B1. Train set - X_train"],"metadata":{"id":"VMDstUGcRrzc"},"id":"VMDstUGcRrzc"},{"cell_type":"code","source":["X_train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uWekldheWjlQ","executionInfo":{"status":"ok","timestamp":1705420634752,"user_tz":0,"elapsed":56,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"75ceab04-2ddf-49cc-cabc-e0ada0383328"},"id":"uWekldheWjlQ","execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 623 entries, 115 to 38\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Pclass    623 non-null    int64  \n"," 1   Sex       623 non-null    int64  \n"," 2   Age       496 non-null    float64\n"," 3   SibSp     623 non-null    int64  \n"," 4   Parch     623 non-null    int64  \n"," 5   Fare      623 non-null    float64\n"," 6   Embarked  622 non-null    float64\n","dtypes: float64(3), int64(4)\n","memory usage: 38.9 KB\n"]}]},{"cell_type":"markdown","source":["## B1.1. Missing values - training set"],"metadata":{"id":"8VTlGdtRnUED"},"id":"8VTlGdtRnUED"},{"cell_type":"code","source":["null_values_train = X_train.isna().sum().sort_values(ascending=False)\n","\n","print('Train set null values by feature: \\n {}'.format(null_values_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6d0WluH0oLDT","executionInfo":{"status":"ok","timestamp":1705420634753,"user_tz":0,"elapsed":56,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"9c8a2962-898e-48f2-aabc-6e468519ca71"},"id":"6d0WluH0oLDT","execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Train set null values by feature: \n"," Age         127\n","Embarked      1\n","Pclass        0\n","Sex           0\n","SibSp         0\n","Parch         0\n","Fare          0\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["### B1.1.1 Filling missing values of 'Age' feature with the mean - training set"],"metadata":{"id":"NtnSBkD8a1me"},"id":"NtnSBkD8a1me"},{"cell_type":"code","source":["print('Train set null values in Age feature are: {}'.format(X_train['Age'].isna().sum()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CzU0lo1xX1lE","executionInfo":{"status":"ok","timestamp":1705420634753,"user_tz":0,"elapsed":53,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"3d126756-85de-4096-e9d1-382a783900c8"},"id":"CzU0lo1xX1lE","execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Train set null values in Age feature are: 127\n"]}]},{"cell_type":"code","execution_count":27,"id":"1c07399b-2324-4878-9f56-51c237e99558","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1c07399b-2324-4878-9f56-51c237e99558","executionInfo":{"status":"ok","timestamp":1705420634753,"user_tz":0,"elapsed":49,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"107ec876-1fc8-410a-a91a-b6efbb794be3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([17.  , 28.  ,   nan, 20.  , 47.  , 36.  , 16.  ,  5.  , 25.  ,\n","       39.  , 18.  , 40.  , 24.  , 19.  , 30.  ,  2.  , 21.  , 43.  ,\n","       54.  , 14.  , 32.  , 23.  , 37.  ,  1.  , 22.  , 33.  ,  4.  ,\n","       58.  ,  9.  , 50.  , 31.  , 26.  ,  0.92,  8.  , 70.5 , 45.  ,\n","       65.  , 60.  ,  0.83, 27.  , 44.  , 20.5 , 35.  , 62.  , 42.  ,\n","       29.  , 70.  , 49.  ,  3.  , 34.  , 32.5 ,  0.67, 66.  , 15.  ,\n","       63.  , 40.5 , 74.  , 56.  , 41.  , 30.5 , 10.  , 45.5 , 38.  ,\n","       59.  , 51.  , 46.  , 13.  ,  6.  , 28.5 , 48.  , 64.  , 61.  ,\n","       52.  , 23.5 , 57.  ,  7.  , 80.  , 55.  , 55.5 , 71.  , 34.5 ,\n","        0.75, 11.  ])"]},"metadata":{},"execution_count":27}],"source":["X_train['Age'].unique()"]},{"cell_type":"code","source":["age_mean_train = X_train['Age'].mean()\n","print('The mean age of the Train set is: {}'.format(age_mean_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BfQuPURUSQ9H","executionInfo":{"status":"ok","timestamp":1705420634753,"user_tz":0,"elapsed":47,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"73b8fd01-d4a4-4715-9503-8bbf7c6351a3"},"id":"BfQuPURUSQ9H","execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["The mean age of the Train set is: 30.08266129032258\n"]}]},{"cell_type":"code","source":["X_train['Age'] = X_train['Age'].fillna(value=age_mean_train)\n","X_train['Age']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3DDHU2u-c9z-","executionInfo":{"status":"ok","timestamp":1705420634753,"user_tz":0,"elapsed":45,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"2f21bd3c-402b-40b5-d1f0-b1f4ebd0e735"},"id":"3DDHU2u-c9z-","execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId\n","115    17.000000\n","875    28.000000\n","77     30.082661\n","877    20.000000\n","675    30.082661\n","         ...    \n","716    19.000000\n","768    30.500000\n","73     21.000000\n","236    30.082661\n","38     21.000000\n","Name: Age, Length: 623, dtype: float64"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["X_train['Age'].isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p5sBJ0IGd5e_","executionInfo":{"status":"ok","timestamp":1705420634754,"user_tz":0,"elapsed":44,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"f8814a73-fb2d-48c8-d75c-59a87289e213"},"id":"p5sBJ0IGd5e_","execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["X_train['Age'] = X_train['Age'].astype(int)"],"metadata":{"id":"N0iqFuN5SRQm","executionInfo":{"status":"ok","timestamp":1705420634754,"user_tz":0,"elapsed":43,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"N0iqFuN5SRQm","execution_count":31,"outputs":[]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"24OAxiB6i9Ho"},"id":"24OAxiB6i9Ho"},{"cell_type":"markdown","source":["### B1.1.2 Filling missing values of 'Embarked' feature with the mode - train set"],"metadata":{"id":"69pioUMdvwRa"},"id":"69pioUMdvwRa"},{"cell_type":"code","source":["X_train['Embarked'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mUI4HM5XVj6D","executionInfo":{"status":"ok","timestamp":1705420634754,"user_tz":0,"elapsed":42,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"05d831e1-c3be-4e53-86c4-830825a77eba"},"id":"mUI4HM5XVj6D","execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.0    458\n","1.0    112\n","2.0     52\n","Name: Embarked, dtype: int64"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["embarked_mode_train = X_train['Embarked'].mode()\n","print('The mode of the feature Embarked of the Train set is: {}'.format(embarked_mode_train[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gMjQayc0v3z4","executionInfo":{"status":"ok","timestamp":1705420634754,"user_tz":0,"elapsed":41,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"f85f9fee-ab7d-4871-d8db-353f8fdafc6f"},"id":"gMjQayc0v3z4","execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["The mode of the feature Embarked of the Train set is: 3.0\n"]}]},{"cell_type":"code","source":["X_train = X_train.fillna(embarked_mode_train[0])"],"metadata":{"id":"Vvdmp9uK3q51","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":40,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"Vvdmp9uK3q51","execution_count":34,"outputs":[]},{"cell_type":"code","source":["X_train['Embarked'].isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wBtNtXoUyP6E","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":40,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"e07dcc1d-be75-49b7-8021-a68140c87284"},"id":"wBtNtXoUyP6E","execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"Y7_tGgmlWbCQ"},"id":"Y7_tGgmlWbCQ"},{"cell_type":"markdown","source":["## B2. Test set - X_test"],"metadata":{"id":"bW1loj-iWVWn"},"id":"bW1loj-iWVWn"},{"cell_type":"code","source":["X_test.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fbKNHOyHWcfe","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":37,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"3c2287cf-c8b2-4e71-cf17-0c3d8e0f8784"},"id":"fbKNHOyHWcfe","execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 268 entries, 863 to 93\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Pclass    268 non-null    int64  \n"," 1   Sex       268 non-null    int64  \n"," 2   Age       218 non-null    float64\n"," 3   SibSp     268 non-null    int64  \n"," 4   Parch     268 non-null    int64  \n"," 5   Fare      268 non-null    float64\n"," 6   Embarked  267 non-null    float64\n","dtypes: float64(3), int64(4)\n","memory usage: 16.8 KB\n"]}]},{"cell_type":"markdown","source":["## B2.1. Missing values - test set"],"metadata":{"id":"-iFdn_0ArKch"},"id":"-iFdn_0ArKch"},{"cell_type":"code","source":["null_values_test= X_test.isna().sum().sort_values(ascending=False)\n","\n","print('Test set null values by feature: \\n {}'.format(null_values_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NW0N7y5GrNEU","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":35,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"8b872431-c772-40f2-efe5-4443bcd301c2"},"id":"NW0N7y5GrNEU","execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set null values by feature: \n"," Age         50\n","Embarked     1\n","Pclass       0\n","Sex          0\n","SibSp        0\n","Parch        0\n","Fare         0\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["### B2.1.1 Filling missing values of 'Age' feature with the mean - test set"],"metadata":{"id":"vc1yOImnrWv0"},"id":"vc1yOImnrWv0"},{"cell_type":"code","source":["print('Test set null values in Age feature are: {}'.format(X_test['Age'].isna().sum()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4SIppITYrpSw","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":31,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"8419202e-498a-48fa-9c6d-2b8ff2725fa9"},"id":"4SIppITYrpSw","execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Test set null values in Age feature are: 50\n"]}]},{"cell_type":"code","source":["X_test['Age'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ln7q2LQyrw59","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":29,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"e74211f5-d4ac-425b-8d03-e3e1760c51da"},"id":"ln7q2LQyrw59","execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([48.  ,   nan, 17.  ,  7.  , 21.  , 36.5 , 35.  , 28.  , 25.  ,\n","       26.  , 54.  , 10.  , 24.  , 36.  , 32.  , 18.  , 14.5 , 27.  ,\n","       42.  , 22.  , 39.  , 40.5 ,  5.  , 20.  , 47.  , 45.5 ,  1.  ,\n","       11.  , 16.  , 19.  , 29.  , 61.  , 45.  ,  2.  , 43.  , 14.  ,\n","       46.  , 57.  , 31.  , 58.  , 34.  , 23.  ,  6.  , 30.  , 59.  ,\n","       38.  , 49.  , 33.  , 52.  , 44.  ,  0.75, 37.  , 15.  , 62.  ,\n","        9.  , 24.5 , 71.  , 53.  , 51.  ,  4.  , 28.5 , 56.  , 12.  ,\n","        0.42, 60.  , 41.  , 40.  , 13.  ])"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["age_mean_test = X_test['Age'].mean()\n","print('The mean age of the Test set is: {}'.format(age_mean_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RcHnyHebrTNV","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":27,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"fa7e2b25-a7ff-46e0-d8fb-1fb2c2384ae6"},"id":"RcHnyHebrTNV","execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["The mean age of the Test set is: 28.82646788990826\n"]}]},{"cell_type":"code","source":["X_test['Age'] = X_test['Age'].fillna(age_mean_test)\n","X_test['Age']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0MYEv_zcr_vj","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":25,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"eaeabd52-f03c-40de-fe2a-9b61fa27e96e"},"id":"0MYEv_zcr_vj","execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId\n","863    48.000000\n","224    28.826468\n","85     17.000000\n","681    28.826468\n","536     7.000000\n","         ...    \n","248    24.000000\n","552    27.000000\n","240    33.000000\n","485    25.000000\n","93     46.000000\n","Name: Age, Length: 268, dtype: float64"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["X_test['Age'].isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LPXomfS8sMK0","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":23,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"0795663e-aa73-482d-c517-40579e5ec47d"},"id":"LPXomfS8sMK0","execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["X_test['Age'] = X_test['Age'].astype(int)"],"metadata":{"id":"s9LUifBnshou","executionInfo":{"status":"ok","timestamp":1705420634755,"user_tz":0,"elapsed":19,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"s9LUifBnshou","execution_count":43,"outputs":[]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"vUzsyy_WtH1d"},"id":"vUzsyy_WtH1d"},{"cell_type":"markdown","source":["### B2.1.2 Filling missing values of 'Embarked' feature with the mode - test set"],"metadata":{"id":"_bSukExMtHQd"},"id":"_bSukExMtHQd"},{"cell_type":"code","source":["X_test['Embarked'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BIO21M1WtG9s","executionInfo":{"status":"ok","timestamp":1705420634756,"user_tz":0,"elapsed":20,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"f1d50102-cbcf-43fe-bd2a-df8f73b229b3"},"id":"BIO21M1WtG9s","execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.0    186\n","1.0     56\n","2.0     25\n","Name: Embarked, dtype: int64"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["embarked_mode_test = X_test['Embarked'].mode()\n","print('The mode of the feature Embarked of the Test set is: {}'.format(embarked_mode_test[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4QHC7TaRtTVU","executionInfo":{"status":"ok","timestamp":1705420634756,"user_tz":0,"elapsed":18,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"04881e63-0da5-4648-e44d-afe69326bdc2"},"id":"4QHC7TaRtTVU","execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["The mode of the feature Embarked of the Test set is: 3.0\n"]}]},{"cell_type":"code","source":["X_test['Embarked'] = X_test['Embarked'].fillna(embarked_mode_test[0])"],"metadata":{"id":"MD_8tb4F3OWg","executionInfo":{"status":"ok","timestamp":1705420634756,"user_tz":0,"elapsed":16,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"MD_8tb4F3OWg","execution_count":46,"outputs":[]},{"cell_type":"code","source":["X_test['Embarked'].isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lfKSbtssuwxD","executionInfo":{"status":"ok","timestamp":1705420634756,"user_tz":0,"elapsed":16,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"a0c0b27f-855e-4458-af60-2a79a3150ae1"},"id":"lfKSbtssuwxD","execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"VmyFwxfIYijh"},"id":"VmyFwxfIYijh"},{"cell_type":"markdown","source":["---"],"metadata":{"id":"S6fmRKoZ3StR"},"id":"S6fmRKoZ3StR"},{"cell_type":"markdown","source":["## C. Exploratory Data Analysis - train set vs test set"],"metadata":{"id":"2hCtuL-qt62m"},"id":"2hCtuL-qt62m"},{"cell_type":"code","source":["# X_train\n","fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))\n","sns.histplot(X_train['Age'], kde=False, color='#8B4513', ax=axes[0])\n","axes[0].set_title('Histogram by Age - Train Set')\n","axes[0].set_xlabel('Age')\n","axes[0].set_ylabel('Frequency')\n","\n","# X_test\n","sns.histplot(X_test['Age'], kde=False, color='#FF6F61', ax=axes[1])\n","axes[1].set_title('Histogram by Age - Test Set')\n","axes[1].set_xlabel('Age')\n","axes[1].set_ylabel('Frequency')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":591},"id":"MeueB91G3jcR","executionInfo":{"status":"ok","timestamp":1705420636240,"user_tz":0,"elapsed":1498,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"5b22857c-30f9-4819-ea32-e5a8b3071ed3"},"id":"MeueB91G3jcR","execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10,10))\n","#Pie chart Age X_train\n","axes[0].pie(X_train['Embarked'].value_counts(), labels=['3 - Southampton', '1 -Cherbourg', '2 - Queenstow'], autopct='%1.1f%%', startangle=140, colors=['#8B4513', '#8B6000','#8B8000'], textprops={ 'fontsize': 14})\n","axes[0].set_title('Distribuition of Embarked - Train Set')\n","#Pie chart Age X_test\n","axes[1].pie(X_test['Embarked'].value_counts(), labels=['3 - Southampton', '1 -Cherbourg', '2 - Queenstow'], autopct='%1.1f%%', startangle=140, colors=['#FF6F61','#FF6F40','#FF6F20'], textprops={'fontsize': 14})\n","axes[1].set_title('Distribuition of Embarked - Test Set')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"id":"-WGBUkDGv6Ja","executionInfo":{"status":"ok","timestamp":1705420636241,"user_tz":0,"elapsed":11,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"bf784712-62df-4db0-8c1f-5468308b23de"},"id":"-WGBUkDGv6Ja","execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10,5))\n","# Heatmap X_train\n","sns.heatmap(X_train.corr(method='pearson'), annot = True, cmap=sns.color_palette(\"YlOrBr\", as_cmap=True), ax=axes[0]);\n","axes[0].set_title('Heatmap Train Set')\n","# Heatmap X_test\n","sns.heatmap(X_test.corr(method='pearson'), annot = True, cmap = sns.color_palette(\"rocket_r\", as_cmap=True), ax=axes[1]);\n","axes[1].set_title('Heatmap Test Set')\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"MqmgTpk3sZ8g","executionInfo":{"status":"ok","timestamp":1705420637052,"user_tz":0,"elapsed":821,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"a91f39e1-ec9e-4831-ed0e-9d55f9e7d3e2"},"id":"MqmgTpk3sZ8g","execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"HB7DXJUpsxDg"},"id":"HB7DXJUpsxDg"},{"cell_type":"markdown","source":["## D. Train dataset model + evaluation"],"metadata":{"id":"fYmUQR9Ps2Xv"},"id":"fYmUQR9Ps2Xv"},{"cell_type":"code","source":["DTclf = tree.DecisionTreeClassifier()"],"metadata":{"id":"OZ9AP0DbsxxA","executionInfo":{"status":"ok","timestamp":1705420637054,"user_tz":0,"elapsed":94,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"OZ9AP0DbsxxA","execution_count":51,"outputs":[]},{"cell_type":"code","source":["DTclf = DTclf.fit(X_train,y_train)"],"metadata":{"id":"EtQEjO-vwh4N","executionInfo":{"status":"ok","timestamp":1705420637056,"user_tz":0,"elapsed":94,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"EtQEjO-vwh4N","execution_count":52,"outputs":[]},{"cell_type":"code","source":["prediction = DTclf.predict(X_test)"],"metadata":{"id":"No5cQFV66m_a","executionInfo":{"status":"ok","timestamp":1705420637057,"user_tz":0,"elapsed":87,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"No5cQFV66m_a","execution_count":53,"outputs":[]},{"cell_type":"code","source":["print(prediction)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WsqLNl7B6pF-","executionInfo":{"status":"ok","timestamp":1705420637058,"user_tz":0,"elapsed":87,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"ee62d423-8151-4089-81e4-7d9ef77882a6"},"id":"WsqLNl7B6pF-","execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 0 1 1 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 0 1 0 0 0 1\n"," 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0\n"," 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1\n"," 1 0 0 0 0 0 0 1 0 1 0 0 0 1 1 1 0 0 0 0 0 1 0 1 1 1 1 0 1 1 0 1 0 0 0 1 0\n"," 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 1\n"," 0 0 1 0 0 0 1 1 1 0 1 1 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 0 1 1 1 0 0 0\n"," 1 1 0 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 0 1 1 1 1 1 1 0\n"," 0 1 0 1 0 0 0 0 1]\n"]}]},{"cell_type":"code","source":["DTclf.classes_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0lYpz8hF6snm","executionInfo":{"status":"ok","timestamp":1705420637058,"user_tz":0,"elapsed":79,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"79a58e3e-5cec-4a7f-e2e7-b8003d51f42e"},"id":"0lYpz8hF6snm","execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1])"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["titanic_data.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WmayhGzy6xqf","executionInfo":{"status":"ok","timestamp":1705420637059,"user_tz":0,"elapsed":78,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"eb72127f-1484-48ec-ece4-17d5f1e3fab9"},"id":"WmayhGzy6xqf","execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare',\n","       'Embarked'],\n","      dtype='object')"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["DTclf.feature_importances_ # explainability"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sw5MPQXn6vNl","executionInfo":{"status":"ok","timestamp":1705420637059,"user_tz":0,"elapsed":75,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"531db959-ba35-4518-bbe5-514d5ef2a643"},"id":"Sw5MPQXn6vNl","execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.10654671, 0.33142091, 0.23614929, 0.0655845 , 0.00894419,\n","       0.21434118, 0.03701323])"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report"],"metadata":{"id":"b8Hp5jJj6-SC","executionInfo":{"status":"ok","timestamp":1705420637059,"user_tz":0,"elapsed":72,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"b8Hp5jJj6-SC","execution_count":58,"outputs":[]},{"cell_type":"code","source":["print(classification_report(y_test, prediction))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wNRkafwe7Adi","executionInfo":{"status":"ok","timestamp":1705420637060,"user_tz":0,"elapsed":73,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"9d0efe13-0c03-49a1-a634-a5479c0b21a7"},"id":"wNRkafwe7Adi","execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.75      0.84      0.79       153\n","           1       0.75      0.62      0.68       115\n","\n","    accuracy                           0.75       268\n","   macro avg       0.75      0.73      0.73       268\n","weighted avg       0.75      0.75      0.74       268\n","\n"]}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"yZMkz3TFsyaq"},"id":"yZMkz3TFsyaq"},{"cell_type":"code","source":[],"metadata":{"id":"fPCNFfn_lXYC","executionInfo":{"status":"ok","timestamp":1705420637061,"user_tz":0,"elapsed":72,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"fPCNFfn_lXYC","execution_count":59,"outputs":[]},{"cell_type":"markdown","source":["## E. Predict the survivals on the Titanic_test Dataset"],"metadata":{"id":"y-_pD_9Dob5E"},"id":"y-_pD_9Dob5E"},{"cell_type":"code","source":["titanic_test_data = pd.read_csv(\"/content/drive/MyDrive/8.Machine Learning/Dataset Titanic/test.csv\")\n","titanic_test_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"9ipjpnztjJkC","executionInfo":{"status":"ok","timestamp":1705420637061,"user_tz":0,"elapsed":72,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"c1eb4090-9fe6-4220-dc82-6b83b021729e"},"id":"9ipjpnztjJkC","execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Pclass                                          Name     Sex  \\\n","0          892       3                              Kelly, Mr. James    male   \n","1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n","2          894       2                     Myles, Mr. Thomas Francis    male   \n","3          895       3                              Wirz, Mr. Albert    male   \n","4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n","\n","    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n","0  34.5      0      0   330911   7.8292   NaN        Q  \n","1  47.0      1      0   363272   7.0000   NaN        S  \n","2  62.0      0      0   240276   9.6875   NaN        Q  \n","3  27.0      0      0   315154   8.6625   NaN        S  \n","4  22.0      1      1  3101298  12.2875   NaN        S  "],"text/html":["\n","  <div id=\"df-490098dc-8797-4e6c-8762-fc60efabd28c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>Kelly, Mr. James</td>\n","      <td>male</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330911</td>\n","      <td>7.8292</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n","      <td>female</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>363272</td>\n","      <td>7.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>Myles, Mr. Thomas Francis</td>\n","      <td>male</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>240276</td>\n","      <td>9.6875</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>Wirz, Mr. Albert</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>315154</td>\n","      <td>8.6625</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3101298</td>\n","      <td>12.2875</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-490098dc-8797-4e6c-8762-fc60efabd28c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-490098dc-8797-4e6c-8762-fc60efabd28c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-490098dc-8797-4e6c-8762-fc60efabd28c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-12e33f16-af9d-4f36-bcbf-011d734bdfec\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12e33f16-af9d-4f36-bcbf-011d734bdfec')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-12e33f16-af9d-4f36-bcbf-011d734bdfec button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":60}]},{"cell_type":"markdown","source":["## E1. EDA"],"metadata":{"id":"83BFW6QKplCm"},"id":"83BFW6QKplCm"},{"cell_type":"code","source":["titanic_test_data = titanic_test_data.drop([\"Name\",\"Ticket\",\"Cabin\"], axis=1)\n","titanic_test_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"PIUvrGydodh5","executionInfo":{"status":"ok","timestamp":1705420637062,"user_tz":0,"elapsed":72,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"ab16d1a2-a975-4cb7-c5b9-19a3bc7dbb47"},"id":"PIUvrGydodh5","execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   PassengerId  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","0          892       3    male  34.5      0      0   7.8292        Q\n","1          893       3  female  47.0      1      0   7.0000        S\n","2          894       2    male  62.0      0      0   9.6875        Q\n","3          895       3    male  27.0      0      0   8.6625        S\n","4          896       3  female  22.0      1      1  12.2875        S"],"text/html":["\n","  <div id=\"df-34951b39-8702-478e-b94a-590db4eb6bf1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8292</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>male</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.6875</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.6625</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34951b39-8702-478e-b94a-590db4eb6bf1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-34951b39-8702-478e-b94a-590db4eb6bf1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-34951b39-8702-478e-b94a-590db4eb6bf1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-70e40dd3-4966-4625-8f72-79a2d5a5d5c4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-70e40dd3-4966-4625-8f72-79a2d5a5d5c4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-70e40dd3-4966-4625-8f72-79a2d5a5d5c4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["titanic_test_data = titanic_test_data.set_index('PassengerId')\n","titanic_test_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"nIvOsqUVopHx","executionInfo":{"status":"ok","timestamp":1705420637064,"user_tz":0,"elapsed":73,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"496c8107-9eff-476e-fad4-e9fb98737975"},"id":"nIvOsqUVopHx","execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","PassengerId                                                      \n","892               3    male  34.5      0      0   7.8292        Q\n","893               3  female  47.0      1      0   7.0000        S\n","894               2    male  62.0      0      0   9.6875        Q\n","895               3    male  27.0      0      0   8.6625        S\n","896               3  female  22.0      1      1  12.2875        S"],"text/html":["\n","  <div id=\"df-97aaf186-68a4-4d6c-9ed8-d92010d08ad8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>892</th>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8292</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>893</th>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>894</th>\n","      <td>2</td>\n","      <td>male</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.6875</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>895</th>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.6625</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>896</th>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97aaf186-68a4-4d6c-9ed8-d92010d08ad8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-97aaf186-68a4-4d6c-9ed8-d92010d08ad8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-97aaf186-68a4-4d6c-9ed8-d92010d08ad8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8a674617-e22d-4cf8-810f-b07a1ab5f22c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a674617-e22d-4cf8-810f-b07a1ab5f22c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8a674617-e22d-4cf8-810f-b07a1ab5f22c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["titanic_test_data['Sex'] = titanic_test_data['Sex'].replace(['female','male'],[1,2])\n","titanic_test_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"hXTXG63toywd","executionInfo":{"status":"ok","timestamp":1705420637064,"user_tz":0,"elapsed":71,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"5000f750-bb2b-4291-8dc8-95353a1b1a51"},"id":"hXTXG63toywd","execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Pclass  Sex   Age  SibSp  Parch     Fare Embarked\n","PassengerId                                                   \n","892               3    2  34.5      0      0   7.8292        Q\n","893               3    1  47.0      1      0   7.0000        S\n","894               2    2  62.0      0      0   9.6875        Q\n","895               3    2  27.0      0      0   8.6625        S\n","896               3    1  22.0      1      1  12.2875        S"],"text/html":["\n","  <div id=\"df-939b4003-1fff-43e9-82ad-478e111be5e3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>892</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8292</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>893</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.0000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>894</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.6875</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>895</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.6625</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>896</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-939b4003-1fff-43e9-82ad-478e111be5e3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-939b4003-1fff-43e9-82ad-478e111be5e3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-939b4003-1fff-43e9-82ad-478e111be5e3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4da3f00f-8d28-4bac-99ff-733d646e9a85\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4da3f00f-8d28-4bac-99ff-733d646e9a85')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4da3f00f-8d28-4bac-99ff-733d646e9a85 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["titanic_test_data['Embarked'].replace( 'C', 1, inplace=True)\n","titanic_test_data['Embarked'].replace( 'Q', 2, inplace=True)\n","titanic_test_data['Embarked'].replace( 'S', 3, inplace=True)\n","titanic_test_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"wSRbJczxpUkp","executionInfo":{"status":"ok","timestamp":1705420637064,"user_tz":0,"elapsed":70,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"e47dff02-9fc1-48ae-b63f-1f07eeb3c202"},"id":"wSRbJczxpUkp","execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","PassengerId                                                    \n","892               3    2  34.5      0      0   7.8292         2\n","893               3    1  47.0      1      0   7.0000         3\n","894               2    2  62.0      0      0   9.6875         2\n","895               3    2  27.0      0      0   8.6625         3\n","896               3    1  22.0      1      1  12.2875         3"],"text/html":["\n","  <div id=\"df-bd256d1a-ab89-4703-8812-d32da2cac366\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>892</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8292</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>893</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.0000</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>894</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.6875</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>895</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.6625</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>896</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd256d1a-ab89-4703-8812-d32da2cac366')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bd256d1a-ab89-4703-8812-d32da2cac366 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bd256d1a-ab89-4703-8812-d32da2cac366');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1765a500-4d1e-4703-a1bf-b0bd87b5623e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1765a500-4d1e-4703-a1bf-b0bd87b5623e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1765a500-4d1e-4703-a1bf-b0bd87b5623e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["age_mean_test_data = titanic_test_data['Age'].mean()\n","age_mean_test_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_F9-TfMZqayA","executionInfo":{"status":"ok","timestamp":1705420637065,"user_tz":0,"elapsed":70,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"b9e0ef6d-3f76-4f38-b88e-78fbb4e68079"},"id":"_F9-TfMZqayA","execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["30.272590361445783"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["titanic_test_data['Age'] = titanic_test_data['Age'].fillna(age_mean_test_data)\n","titanic_test_data['Age'] = titanic_test_data['Age'].astype(int)\n","titanic_test_data['Age']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q7P_ZxCSqknQ","executionInfo":{"status":"ok","timestamp":1705420637069,"user_tz":0,"elapsed":72,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"35f67197-6c0c-4730-85a3-d2c0f91456c1"},"id":"q7P_ZxCSqknQ","execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId\n","892     34\n","893     47\n","894     62\n","895     27\n","896     22\n","        ..\n","1305    30\n","1306    39\n","1307    38\n","1308    30\n","1309    30\n","Name: Age, Length: 418, dtype: int64"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["embarked_mode_test_data = titanic_test_data['Embarked'].mode()\n","embarked_mode_test_data[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AMI1bCSvqw7A","executionInfo":{"status":"ok","timestamp":1705420637070,"user_tz":0,"elapsed":72,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"3d42bc5e-1e6d-4c5f-9607-04a8fbaa2cf3"},"id":"AMI1bCSvqw7A","execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["titanic_test_data['Embarked'] = titanic_test_data['Embarked'].fillna(embarked_mode_test_data[0])\n","titanic_test_data['Embarked'] = titanic_test_data['Embarked'].astype(int)\n","titanic_test_data['Embarked']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uAVoiVv-q_iC","executionInfo":{"status":"ok","timestamp":1705420637070,"user_tz":0,"elapsed":70,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"5e84cf44-8b23-409c-ce43-3db28021365e"},"id":"uAVoiVv-q_iC","execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId\n","892     2\n","893     3\n","894     2\n","895     3\n","896     3\n","       ..\n","1305    3\n","1306    1\n","1307    3\n","1308    3\n","1309    1\n","Name: Embarked, Length: 418, dtype: int64"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["titanic_test_data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LiPrrOz-qSag","executionInfo":{"status":"ok","timestamp":1705420637070,"user_tz":0,"elapsed":68,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"e2c85cf9-fc14-4c2d-da24-bea1a3833236"},"id":"LiPrrOz-qSag","execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 418 entries, 892 to 1309\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Pclass    418 non-null    int64  \n"," 1   Sex       418 non-null    int64  \n"," 2   Age       418 non-null    int64  \n"," 3   SibSp     418 non-null    int64  \n"," 4   Parch     418 non-null    int64  \n"," 5   Fare      417 non-null    float64\n"," 6   Embarked  418 non-null    int64  \n","dtypes: float64(1), int64(6)\n","memory usage: 26.1 KB\n"]}]},{"cell_type":"code","source":["fare_mean_test_data = titanic_test_data['Fare'].mean()\n","fare_mean_test_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_YpScyUrXIh","executionInfo":{"status":"ok","timestamp":1705420637071,"user_tz":0,"elapsed":68,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"60ac4ede-9eb1-4cd5-ccb9-98912e741ee3"},"id":"V_YpScyUrXIh","execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["35.627188489208635"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["titanic_test_data['Fare'] = titanic_test_data['Fare'].fillna(fare_mean_test_data)\n","titanic_test_data['Fare']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9DxfpLHurSfK","executionInfo":{"status":"ok","timestamp":1705420637072,"user_tz":0,"elapsed":68,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"81044869-ce0d-49dd-fec1-1f6d985d63d6"},"id":"9DxfpLHurSfK","execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId\n","892       7.8292\n","893       7.0000\n","894       9.6875\n","895       8.6625\n","896      12.2875\n","          ...   \n","1305      8.0500\n","1306    108.9000\n","1307      7.2500\n","1308      8.0500\n","1309     22.3583\n","Name: Fare, Length: 418, dtype: float64"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["titanic_test_data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zKVKjuDQr170","executionInfo":{"status":"ok","timestamp":1705420637072,"user_tz":0,"elapsed":68,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"8f4f3fb0-65c3-4b31-b261-8aafb8ed8beb"},"id":"zKVKjuDQr170","execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 418 entries, 892 to 1309\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Pclass    418 non-null    int64  \n"," 1   Sex       418 non-null    int64  \n"," 2   Age       418 non-null    int64  \n"," 3   SibSp     418 non-null    int64  \n"," 4   Parch     418 non-null    int64  \n"," 5   Fare      418 non-null    float64\n"," 6   Embarked  418 non-null    int64  \n","dtypes: float64(1), int64(6)\n","memory usage: 26.1 KB\n"]}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"fyPBntgfr4si"},"id":"fyPBntgfr4si"},{"cell_type":"markdown","source":["## E2. Predictions"],"metadata":{"id":"bXVMkgOMpo07"},"id":"bXVMkgOMpo07"},{"cell_type":"code","source":["titanic_test_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"S616aK2JtLeh","executionInfo":{"status":"ok","timestamp":1705420637072,"user_tz":0,"elapsed":67,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"08e7ce1b-d2a7-4f13-8091-3a47112ab87c"},"id":"S616aK2JtLeh","execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Pclass  Sex  Age  SibSp  Parch      Fare  Embarked\n","PassengerId                                                    \n","892               3    2   34      0      0    7.8292         2\n","893               3    1   47      1      0    7.0000         3\n","894               2    2   62      0      0    9.6875         2\n","895               3    2   27      0      0    8.6625         3\n","896               3    1   22      1      1   12.2875         3\n","...             ...  ...  ...    ...    ...       ...       ...\n","1305              3    2   30      0      0    8.0500         3\n","1306              1    1   39      0      0  108.9000         1\n","1307              3    2   38      0      0    7.2500         3\n","1308              3    2   30      0      0    8.0500         3\n","1309              3    2   30      1      1   22.3583         1\n","\n","[418 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-6aff3e20-9c69-46d1-bc23-e27edeeec3f1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>892</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8292</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>893</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.0000</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>894</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>62</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.6875</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>895</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.6625</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>896</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1305</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1306</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>108.9000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1307</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1308</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1309</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>22.3583</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>418 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6aff3e20-9c69-46d1-bc23-e27edeeec3f1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6aff3e20-9c69-46d1-bc23-e27edeeec3f1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6aff3e20-9c69-46d1-bc23-e27edeeec3f1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-41d57702-c937-4340-bec4-be56a2280d97\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41d57702-c937-4340-bec4-be56a2280d97')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-41d57702-c937-4340-bec4-be56a2280d97 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["prediction_test = DTclf.predict(titanic_test_data)\n","print(prediction_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X6SKfpQ2pxXY","executionInfo":{"status":"ok","timestamp":1705420637072,"user_tz":0,"elapsed":66,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"d3411dcf-da28-4e31-98b5-383d2740a8fe"},"id":"X6SKfpQ2pxXY","execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 1 0\n"," 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 0 0 0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 0 0\n"," 1 1 0 1 0 0 1 0 1 0 0 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1\n"," 1 1 1 1 0 0 1 1 1 1 0 1 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0\n"," 0 0 1 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 1\n"," 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1 0 1 0 1 0\n"," 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 1\n"," 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0\n"," 0 0 0 0 1 1 0 0 1 1 0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0\n"," 1 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 1 0 1 1 0\n"," 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 0 1 1 1 0 0\n"," 0 1 1 1 1 0 0 1 0 0 0]\n"]}]},{"cell_type":"markdown","source":["Generate results to kaggle"],"metadata":{"id":"-Ht-_bfDtpjA"},"id":"-Ht-_bfDtpjA"},{"cell_type":"code","source":["titanic_test_data[\"Survived\"] = DTclf.predict(titanic_test_data)"],"metadata":{"id":"bUB085GatsJQ","executionInfo":{"status":"ok","timestamp":1705420637072,"user_tz":0,"elapsed":64,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"bUB085GatsJQ","execution_count":75,"outputs":[]},{"cell_type":"code","source":["titanic_test_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"JvlxXGMHt11w","executionInfo":{"status":"ok","timestamp":1705420637627,"user_tz":0,"elapsed":619,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"f73ec912-9a8d-4485-c292-eebf7a8dc7d6"},"id":"JvlxXGMHt11w","execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Pclass  Sex  Age  SibSp  Parch      Fare  Embarked  Survived\n","PassengerId                                                              \n","892               3    2   34      0      0    7.8292         2         0\n","893               3    1   47      1      0    7.0000         3         0\n","894               2    2   62      0      0    9.6875         2         0\n","895               3    2   27      0      0    8.6625         3         0\n","896               3    1   22      1      1   12.2875         3         0\n","...             ...  ...  ...    ...    ...       ...       ...       ...\n","1305              3    2   30      0      0    8.0500         3         0\n","1306              1    1   39      0      0  108.9000         1         1\n","1307              3    2   38      0      0    7.2500         3         0\n","1308              3    2   30      0      0    8.0500         3         0\n","1309              3    2   30      1      1   22.3583         1         0\n","\n","[418 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-52f13ec7-f507-4f1a-a996-2a2a25cd3321\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>892</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8292</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>893</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.0000</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>894</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>62</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.6875</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>895</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.6625</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>896</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1305</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1306</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>108.9000</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1307</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1308</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1309</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>22.3583</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>418 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52f13ec7-f507-4f1a-a996-2a2a25cd3321')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-52f13ec7-f507-4f1a-a996-2a2a25cd3321 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-52f13ec7-f507-4f1a-a996-2a2a25cd3321');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ac632ca8-d144-44dd-8745-295a8ba806fe\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac632ca8-d144-44dd-8745-295a8ba806fe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ac632ca8-d144-44dd-8745-295a8ba806fe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["# kaggle data format\n","kaggle_data = titanic_test_data[[\"Survived\"]]\n","kaggle_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"hF21AQfQuFiR","executionInfo":{"status":"ok","timestamp":1705420637627,"user_tz":0,"elapsed":68,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"9c8403f4-475f-4600-868e-b418eb81c538"},"id":"hF21AQfQuFiR","execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Survived\n","PassengerId          \n","892                 0\n","893                 0\n","894                 0\n","895                 0\n","896                 0\n","...               ...\n","1305                0\n","1306                1\n","1307                0\n","1308                0\n","1309                0\n","\n","[418 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-a5f57135-b793-45f1-9db7-d9c42afdaf0a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>892</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>893</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>894</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>895</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>896</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1305</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1306</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1307</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1308</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1309</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>418 rows × 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5f57135-b793-45f1-9db7-d9c42afdaf0a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a5f57135-b793-45f1-9db7-d9c42afdaf0a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a5f57135-b793-45f1-9db7-d9c42afdaf0a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b838c17e-328c-4cb7-8fcf-905b4b6c11c6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b838c17e-328c-4cb7-8fcf-905b4b6c11c6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b838c17e-328c-4cb7-8fcf-905b4b6c11c6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["kaggle_data.reset_index(inplace=True)\n","kaggle_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"f-1BLLaTuLb3","executionInfo":{"status":"ok","timestamp":1705420637627,"user_tz":0,"elapsed":67,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"72ba2488-16e4-44ba-cb82-78d849b554a0"},"id":"f-1BLLaTuLb3","execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     PassengerId  Survived\n","0            892         0\n","1            893         0\n","2            894         0\n","3            895         0\n","4            896         0\n","..           ...       ...\n","413         1305         0\n","414         1306         1\n","415         1307         0\n","416         1308         0\n","417         1309         0\n","\n","[418 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-9135e1bc-30e2-4cb3-9d77-227cedbc84bd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>413</th>\n","      <td>1305</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>414</th>\n","      <td>1306</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>415</th>\n","      <td>1307</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>416</th>\n","      <td>1308</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>417</th>\n","      <td>1309</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>418 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9135e1bc-30e2-4cb3-9d77-227cedbc84bd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9135e1bc-30e2-4cb3-9d77-227cedbc84bd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9135e1bc-30e2-4cb3-9d77-227cedbc84bd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7dab96ef-5ba5-4c51-a6cc-d09f4dd16632\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7dab96ef-5ba5-4c51-a6cc-d09f4dd16632')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7dab96ef-5ba5-4c51-a6cc-d09f4dd16632 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["kaggle_data.to_csv(\"submission_v1.csv\", index=False)"],"metadata":{"id":"H0Lrl-i_uUOX","executionInfo":{"status":"ok","timestamp":1705420637627,"user_tz":0,"elapsed":66,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"H0Lrl-i_uUOX","execution_count":79,"outputs":[]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"ys4pztK0DBWl"},"id":"ys4pztK0DBWl"},{"cell_type":"markdown","source":["### E2.1. Analyse Model Performance"],"metadata":{"id":"EPvhCLUHGILE"},"id":"EPvhCLUHGILE"},{"cell_type":"markdown","source":["#### E2.1.1. K-Fold Validation"],"metadata":{"id":"mwvRo6zKDC7F"},"id":"mwvRo6zKDC7F"},{"cell_type":"code","source":["from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"9HV-ZxkRDMdH","executionInfo":{"status":"ok","timestamp":1705420637628,"user_tz":0,"elapsed":66,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"9HV-ZxkRDMdH","execution_count":80,"outputs":[]},{"cell_type":"code","source":["k = 5\n","kf = KFold(n_splits=k, random_state=None)"],"metadata":{"id":"sjzAWFcfDQnk","executionInfo":{"status":"ok","timestamp":1705420637628,"user_tz":0,"elapsed":65,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"sjzAWFcfDQnk","execution_count":81,"outputs":[]},{"cell_type":"code","source":["X.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B2wV1AJlJuBP","executionInfo":{"status":"ok","timestamp":1705420637628,"user_tz":0,"elapsed":65,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"846b0a1c-11ea-4b5c-d757-6241e9bcbb40"},"id":"B2wV1AJlJuBP","execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 891 entries, 1 to 891\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Pclass    891 non-null    int64  \n"," 1   Sex       891 non-null    int64  \n"," 2   Age       714 non-null    float64\n"," 3   SibSp     891 non-null    int64  \n"," 4   Parch     891 non-null    int64  \n"," 5   Fare      891 non-null    float64\n"," 6   Embarked  889 non-null    float64\n","dtypes: float64(3), int64(4)\n","memory usage: 55.7 KB\n"]}]},{"cell_type":"code","source":["acc_score = []\n","\n","for train_index , test_index in kf.split(X):\n","\n","    X_train_fold , X_test_fold = X.iloc[train_index,:],X.iloc[test_index,:]\n","    y_train_fold , y_test_fold = y.iloc[train_index] , y.iloc[test_index]\n","    X_train_fold = X_train_fold.fillna(np.mean(X_train_fold.Age))\n","    X_test_fold = X_test_fold.fillna(np.mean(X_train_fold.Age))\n","\n","    DTclf.fit(X_train_fold,y_train_fold)\n","    pred_values = DTclf.predict(X_test_fold)\n","\n","    acc = accuracy_score(pred_values , y_test_fold)\n","    acc_score.append(acc)\n","\n","avg_acc_score = sum(acc_score)/k"],"metadata":{"id":"0OYnQjgpEzU9","executionInfo":{"status":"ok","timestamp":1705420637629,"user_tz":0,"elapsed":60,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"0OYnQjgpEzU9","execution_count":83,"outputs":[]},{"cell_type":"code","source":["avg_acc_score"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EdRWsbntFDss","executionInfo":{"status":"ok","timestamp":1705420637629,"user_tz":0,"elapsed":58,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"5c30da1f-4ca5-4b0b-d7ed-710677846cea"},"id":"EdRWsbntFDss","execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7654698386793044"]},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["# Let's also compute the ROC curve for the current model we have\n","from sklearn.metrics import roc_curve, auc"],"metadata":{"id":"D962PsYfFG7T","executionInfo":{"status":"ok","timestamp":1705420637630,"user_tz":0,"elapsed":57,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"D962PsYfFG7T","execution_count":85,"outputs":[]},{"cell_type":"code","source":["#y_test e prediction depois do split testar a nossa data test dividida"],"metadata":{"id":"HOh2LwAEMDnH","executionInfo":{"status":"ok","timestamp":1705420637630,"user_tz":0,"elapsed":56,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"HOh2LwAEMDnH","execution_count":86,"outputs":[]},{"cell_type":"code","source":["fpr, tpr, thresholds = roc_curve(y_true=y_test, y_score=prediction, pos_label=1)"],"metadata":{"id":"9rQg6wCgFJw0","executionInfo":{"status":"ok","timestamp":1705420637630,"user_tz":0,"elapsed":56,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"9rQg6wCgFJw0","execution_count":87,"outputs":[]},{"cell_type":"code","source":["AUC = auc(fpr, tpr)\n","AUC"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aTS0u--qMNai","executionInfo":{"status":"ok","timestamp":1705420637631,"user_tz":0,"elapsed":56,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"02ce28ee-35e8-4f45-cc74-80e820be129f"},"id":"aTS0u--qMNai","execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7302642796248934"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["plt.figure()\n","lw = 2\n","plt.plot(\n","    fpr,\n","    tpr,\n","    color=\"darkorange\",\n","    lw=lw,\n","    label=\"ROC curve (area = %0.2f)\" % AUC,\n",")\n","plt.plot([0, 1], [0, 1], color=\"navy\", lw=lw, linestyle=\"--\")\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel(\"False Positive Rate\")\n","plt.ylabel(\"True Positive Rate\")\n","plt.title(\"Receiver operating characteristic example\")\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"xaONm_SpMSt8","executionInfo":{"status":"ok","timestamp":1705420637631,"user_tz":0,"elapsed":53,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"b92717cd-72c8-4248-8c63-def38cba6a30"},"id":"xaONm_SpMSt8","execution_count":89,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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1a9fn7Jly7J582b27NlDx44dja9zdXXF1taWa9euPXEYLCO1atXi3LlzJmVHjhyhbdu2dOvWDTBsxnvx4kVcXZ8+zaF27dqEhIRQoUIFrK3Tf93GxsZy4cIFJkyYQMOGDQHDHKVneZ6hMVtbW2rXrk1oaKhxLpVeryc0NJSAgGd3AmzdupXk5GS6ds3c9BG9Xp/uDrqzZ8+a1SY5TW6fBzizBnQPGqrGa8+103yhQtYsX+7Hp5+2YN++gZIECSFyjY4dO2JlZcWyZYZlQsqXL8+HH37I4sWL+f777zl//jyXL19m4cKFfPvtt7z55pvUrVsXgLp16zJo0CAmT57MlClT+Pfff7l69SqhoaG89957BAcHZ3jNzp074+zszLBhwzh8+DARERGEhIQYJ+Y2adKE//77j7Vr1xqHiR5PjJ6mS5curFixgn379pnctVS0aFHefPNNJk2aRHBwMJcvX+b48eMsXbr0ibECNG/enCNHjqDTpa33VqlSJfbt28c///zD+fPnGTt2LDdv3nxmbH369OHOnTv873//49ixY1y+fJk///yT0aNHo9PpKFGiBCVLlmTlypVcunSJ0NBQvvnmm2eet2TJksZelyf9yyjxemjAgAGsWrWK4OBgzp8/bxw+fXTJgI8//php06ale+3q1atp164dDg4OJuXx8fF89913HDlyhKtXr/Lff/8xevRooqKiTO4sS0hI4Pjx4zRv3vyZ79NSpEcITIfFamV+WCwuLomRI0P44IMm1K6dln3Xrl2aCROy3qskhBA5wdramoCAAH766Sdee+017O3t6d+/Py4uLvz8888sWbIEnU6Hm5sbX3zxhfH26oc++ugjateuzfLly1mxYgWKouDi4kKHDh3o0aNHhte0tbXl559/ZvLkybz99tvodDpcXV0ZN24cYFjr6J133uHbb78lKSkJf39/unfvzpkzZzL1nrp27cqPP/5IhQoVaNCggclzH3zwAY6OjgQGBnLlyhWKFStGrVq1GDJkyBPP17JlS7RaLfv27TMOsw0aNIjr168zcOBAChcuTK9evWjXrh137z59jliZMmX49ddfmTp1KgMHDiQ5OZny5cvTokULrKys0Gg0fP/990yYMIEuXbpQtWpVPvvsM/r165ep955VnTp14tatW8ycOZPo6Ghq1qzJTz/9ZDI0FhkZme6utfDwcA4f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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"zQAuz_V8Mbr9"},"id":"zQAuz_V8Mbr9"},{"cell_type":"markdown","source":["## F. Improve our model"],"metadata":{"id":"PAClujhkMcXC"},"id":"PAClujhkMcXC"},{"cell_type":"code","source":["# Most common parameters\n","MAX_DEPTH = [2, 5, 10, 25, 50]\n","MIN_SAMPLE_SPLIT = [2, 10, 20, 50]\n","MAX_FEATURES = [ 1,2,3,4,5,6,7, 8]"],"metadata":{"id":"lOgC5DpFMU2T","executionInfo":{"status":"ok","timestamp":1705420637631,"user_tz":0,"elapsed":46,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"lOgC5DpFMU2T","execution_count":90,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV"],"metadata":{"id":"WiRNLlvJMjJr","executionInfo":{"status":"ok","timestamp":1705420637631,"user_tz":0,"elapsed":45,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"WiRNLlvJMjJr","execution_count":91,"outputs":[]},{"cell_type":"code","source":["parameters = {'max_depth':MAX_DEPTH,\n","              'min_samples_split':MIN_SAMPLE_SPLIT,\n","              \"max_features\":MAX_FEATURES}"],"metadata":{"id":"ufRyC_4sOerc","executionInfo":{"status":"ok","timestamp":1705420637632,"user_tz":0,"elapsed":46,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"ufRyC_4sOerc","execution_count":92,"outputs":[]},{"cell_type":"code","source":["clf = GridSearchCV(DTclf, parameters, cv=5, scoring=\"accuracy\")"],"metadata":{"id":"bL9BlwmLOkes","executionInfo":{"status":"ok","timestamp":1705420637633,"user_tz":0,"elapsed":46,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"bL9BlwmLOkes","execution_count":93,"outputs":[]},{"cell_type":"code","source":["clf.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":116},"id":"qIP7cQeaOoVh","executionInfo":{"status":"ok","timestamp":1705420639647,"user_tz":0,"elapsed":2057,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"7cfc58f7-29c0-4676-83f2-8f693c493e95"},"id":"qIP7cQeaOoVh","execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n","             param_grid={'max_depth': [2, 5, 10, 25, 50],\n","                         'max_features': [1, 2, 3, 4, 5, 6, 7, 8],\n","                         'min_samples_split': [2, 10, 20, 50]},\n","             scoring='accuracy')"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n","             param_grid={&#x27;max_depth&#x27;: [2, 5, 10, 25, 50],\n","                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7, 8],\n","                         &#x27;min_samples_split&#x27;: [2, 10, 20, 50]},\n","             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n","             param_grid={&#x27;max_depth&#x27;: [2, 5, 10, 25, 50],\n","                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7, 8],\n","                         &#x27;min_samples_split&#x27;: [2, 10, 20, 50]},\n","             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":94}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"7aVOaBudBkgM"},"id":"7aVOaBudBkgM"},{"cell_type":"markdown","source":["### F1.1. Find best parameters"],"metadata":{"id":"rOHgeQbTBfrW"},"id":"rOHgeQbTBfrW"},{"cell_type":"code","source":["# check best params\n","clf.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MC_NR3AHBl-w","executionInfo":{"status":"ok","timestamp":1705421236816,"user_tz":0,"elapsed":280,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"33767575-038d-4657-b742-def7c5ce0b3e"},"id":"MC_NR3AHBl-w","execution_count":95,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth': 10, 'max_features': 5, 'min_samples_split': 50}"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["clf.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u3n7gnJoBl7V","executionInfo":{"status":"ok","timestamp":1705421247696,"user_tz":0,"elapsed":268,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"12d4e2d5-123e-42c9-b188-1b1232ec6f96"},"id":"u3n7gnJoBl7V","execution_count":96,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8362838709677419"]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["best_model = clf.best_estimator_"],"metadata":{"id":"H7OZ4fxBBl45","executionInfo":{"status":"ok","timestamp":1705421265123,"user_tz":0,"elapsed":241,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"H7OZ4fxBBl45","execution_count":97,"outputs":[]},{"cell_type":"code","source":["# since our best model only requires 4 features, we need to select them\n","best_model.feature_importances_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A1yoWlxUBl2J","executionInfo":{"status":"ok","timestamp":1705421276158,"user_tz":0,"elapsed":287,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"d0a382f0-f955-45d5-b201-300d17130a87"},"id":"A1yoWlxUBl2J","execution_count":98,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.08900559, 0.49963958, 0.09577684, 0.08358302, 0.        ,\n","       0.23100477, 0.0009902 ])"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["X_train.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EhcJo54aB8Oc","executionInfo":{"status":"ok","timestamp":1705421295260,"user_tz":0,"elapsed":289,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"886cadc8-bed1-4271-f785-1a4e5bd7f4d2"},"id":"EhcJo54aB8Oc","execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'], dtype='object')"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["titanic_test_data = titanic_test_data.drop(\"Survived\", axis=1)\n","titanic_test_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"5zxYB4QpCAFr","executionInfo":{"status":"ok","timestamp":1705421612855,"user_tz":0,"elapsed":296,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"60aeec08-3407-4409-bc8c-c5dfc934e42b"},"id":"5zxYB4QpCAFr","execution_count":103,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Pclass  Sex  Age  SibSp  Parch      Fare  Embarked\n","PassengerId                                                    \n","892               3    2   34      0      0    7.8292         2\n","893               3    1   47      1      0    7.0000         3\n","894               2    2   62      0      0    9.6875         2\n","895               3    2   27      0      0    8.6625         3\n","896               3    1   22      1      1   12.2875         3\n","...             ...  ...  ...    ...    ...       ...       ...\n","1305              3    2   30      0      0    8.0500         3\n","1306              1    1   39      0      0  108.9000         1\n","1307              3    2   38      0      0    7.2500         3\n","1308              3    2   30      0      0    8.0500         3\n","1309              3    2   30      1      1   22.3583         1\n","\n","[418 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-bba7dc03-150b-444c-9034-195ff202c3cf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>892</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.8292</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>893</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.0000</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>894</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>62</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.6875</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>895</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.6625</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>896</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1305</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1306</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>108.9000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1307</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1308</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1309</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>30</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>22.3583</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>418 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bba7dc03-150b-444c-9034-195ff202c3cf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bba7dc03-150b-444c-9034-195ff202c3cf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bba7dc03-150b-444c-9034-195ff202c3cf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-790c5f08-e266-4614-852e-e186981c41d5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-790c5f08-e266-4614-852e-e186981c41d5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-790c5f08-e266-4614-852e-e186981c41d5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","source":["# lets make predictions\n","best_predictions= best_model.predict(titanic_test_data)\n","best_predictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zFY8NWPoChcF","executionInfo":{"status":"ok","timestamp":1705421644894,"user_tz":0,"elapsed":264,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"2efaea64-c8fc-4186-fd22-a06be6c8c0f8"},"id":"zFY8NWPoChcF","execution_count":105,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0,\n","       1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,\n","       1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1,\n","       1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n","       0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","       1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n","       0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n","       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n","       0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0,\n","       1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n","       0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,\n","       0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,\n","       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n","       0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n","       1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0,\n","       0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","       1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n","       0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0])"]},"metadata":{},"execution_count":105}]},{"cell_type":"markdown","source":["Submit to Kaggle best_predictions"],"metadata":{"id":"T4jjGPbUDT8l"},"id":"T4jjGPbUDT8l"},{"cell_type":"code","source":["# Let's create a function\n","def write_results_to_disk(test_data, predictions, csv_name):\n","    data = test_data.copy(deep=True)\n","    data[\"Survived\"] = predictions\n","    data = data[[\"Survived\"]]\n","    data.reset_index(inplace=True)\n","    data.to_csv(csv_name, index=False)\n","    print(f\"Successfully written {csv_name}\")"],"metadata":{"id":"ZbG-_pfbDL2O","executionInfo":{"status":"ok","timestamp":1705421816191,"user_tz":0,"elapsed":4,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"ZbG-_pfbDL2O","execution_count":106,"outputs":[]},{"cell_type":"code","source":["write_results_to_disk(test_data=titanic_test_data, predictions=best_predictions, csv_name=\"submission_v2.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eRxWfG4BDLzT","executionInfo":{"status":"ok","timestamp":1705421818001,"user_tz":0,"elapsed":9,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"2b6cb808-c37a-4056-d531-fdcf7d30a651"},"id":"eRxWfG4BDLzT","execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["Successfully written submission_v2.csv\n"]}]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"df9ZCSffD_5T"},"id":"df9ZCSffD_5T"},{"cell_type":"markdown","source":["## G. Improve Features"],"metadata":{"id":"LMBvSGarD_rD"},"id":"LMBvSGarD_rD"},{"cell_type":"code","source":["importances = best_model.feature_importances_\n","importances"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yOGmewQADLwg","executionInfo":{"status":"ok","timestamp":1705421932519,"user_tz":0,"elapsed":289,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"63b39c9e-de8e-4970-df56-048cb978c662"},"id":"yOGmewQADLwg","execution_count":109,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.08900559, 0.49963958, 0.09577684, 0.08358302, 0.        ,\n","       0.23100477, 0.0009902 ])"]},"metadata":{},"execution_count":109}]},{"cell_type":"markdown","source":["As we can see from above the 1st, 2nd, 3rd and 4rd have the most total importance."],"metadata":{"id":"kUbx7haiEVxY"},"id":"kUbx7haiEVxY"},{"cell_type":"code","source":["features_to_keep = [\"Pclass\", \"Sex\", \"Age\", \"Fare\"]"],"metadata":{"id":"rKbJJeYRESEX","executionInfo":{"status":"ok","timestamp":1705421998927,"user_tz":0,"elapsed":303,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"rKbJJeYRESEX","execution_count":110,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"HkPgPEi9ER_8","executionInfo":{"status":"ok","timestamp":1705422126476,"user_tz":0,"elapsed":11,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"22b2dbce-7b6d-4f4e-f504-ea1ec227bf81"},"id":"HkPgPEi9ER_8","execution_count":113,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","PassengerId                                                    \n","1                 3    2  22.0      1      0   7.2500       3.0\n","2                 1    1  38.0      1      0  71.2833       1.0\n","3                 3    1  26.0      0      0   7.9250       3.0\n","4                 1    1  35.0      1      0  53.1000       3.0\n","5                 3    2  35.0      0      0   8.0500       3.0\n","...             ...  ...   ...    ...    ...      ...       ...\n","887               2    2  27.0      0      0  13.0000       3.0\n","888               1    1  19.0      0      0  30.0000       3.0\n","889               3    1   NaN      1      2  23.4500       3.0\n","890               1    2  26.0      0      0  30.0000       1.0\n","891               3    2  32.0      0      0   7.7500       2.0\n","\n","[891 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-9670d811-5a7b-49ec-b8b5-1c600391d723\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>891</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9670d811-5a7b-49ec-b8b5-1c600391d723')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9670d811-5a7b-49ec-b8b5-1c600391d723 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9670d811-5a7b-49ec-b8b5-1c600391d723');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4f73c1b6-6038-41b3-857e-fcca2ff259a2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f73c1b6-6038-41b3-857e-fcca2ff259a2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4f73c1b6-6038-41b3-857e-fcca2ff259a2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["# so if we train the same model\n","MAX_DEPTH = [2, 5, 10, 25, 50]\n","MIN_SAMPLE_SPLIT = [2, 10, 20, 50]\n","MAX_FEATURES = [ 1,2,3,4]\n","parameters = {'max_depth':MAX_DEPTH, 'min_samples_split':MIN_SAMPLE_SPLIT, \"max_features\":MAX_FEATURES}\n","clf = GridSearchCV(DTclf, parameters, cv=5, scoring=\"accuracy\")\n","clf.fit(X_train[features_to_keep], y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":116},"id":"Hj35-p4uE1l9","executionInfo":{"status":"ok","timestamp":1705422169426,"user_tz":0,"elapsed":1481,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"df8a748c-9624-4976-a839-d535a3d7baee"},"id":"Hj35-p4uE1l9","execution_count":114,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n","             param_grid={'max_depth': [2, 5, 10, 25, 50],\n","                         'max_features': [1, 2, 3, 4],\n","                         'min_samples_split': [2, 10, 20, 50]},\n","             scoring='accuracy')"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n","             param_grid={&#x27;max_depth&#x27;: [2, 5, 10, 25, 50],\n","                         &#x27;max_features&#x27;: [1, 2, 3, 4],\n","                         &#x27;min_samples_split&#x27;: [2, 10, 20, 50]},\n","             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),\n","             param_grid={&#x27;max_depth&#x27;: [2, 5, 10, 25, 50],\n","                         &#x27;max_features&#x27;: [1, 2, 3, 4],\n","                         &#x27;min_samples_split&#x27;: [2, 10, 20, 50]},\n","             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":114}]},{"cell_type":"code","source":["clf.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WoC5NTDuE1iA","executionInfo":{"status":"ok","timestamp":1705422178457,"user_tz":0,"elapsed":365,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"c59a8df8-8541-4f7a-d5ed-740f618d35c8"},"id":"WoC5NTDuE1iA","execution_count":115,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth': 5, 'max_features': 2, 'min_samples_split': 2}"]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["clf.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tQkvPSFAE1X8","executionInfo":{"status":"ok","timestamp":1705422207654,"user_tz":0,"elapsed":569,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"98ef12f9-7063-46be-84c2-373ec733613d"},"id":"tQkvPSFAE1X8","execution_count":116,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8362709677419355"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["best_model_2 = clf.best_estimator_"],"metadata":{"id":"defl8xYtFmp1","executionInfo":{"status":"ok","timestamp":1705422255658,"user_tz":0,"elapsed":258,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"defl8xYtFmp1","execution_count":119,"outputs":[]},{"cell_type":"code","source":["# lets make predictions\n","predictions_2 = best_model_2.predict(titanic_test_data[features_to_keep])"],"metadata":{"id":"-26gvTecFcEA","executionInfo":{"status":"ok","timestamp":1705422256842,"user_tz":0,"elapsed":8,"user":{"displayName":"Inês","userId":"11459576547413890108"}}},"id":"-26gvTecFcEA","execution_count":120,"outputs":[]},{"cell_type":"code","source":["write_results_to_disk(test_data=titanic_test_data, predictions=predictions_2, csv_name=\"submission_v3.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_P6OadoCFcAz","executionInfo":{"status":"ok","timestamp":1705422278629,"user_tz":0,"elapsed":284,"user":{"displayName":"Inês","userId":"11459576547413890108"}},"outputId":"71c290a5-95a7-4435-d45f-712e9e09e7f0"},"id":"_P6OadoCFcAz","execution_count":121,"outputs":[{"output_type":"stream","name":"stdout","text":["Successfully written submission_v3.csv\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"53e5zVlcFb9w"},"id":"53e5zVlcFb9w","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.5"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}
